libft/get_next_line/get_next_line.c:	if (!(endl = ft_strchr(current_fd->str, '\n')))
libft/get_next_line/get_next_line.c:	*line = ft_strdup(current_fd->str);
libft/get_next_line/get_next_line.c:		tmp = current_fd->str;
libft/get_next_line/get_next_line.c:		current_fd->str = ft_strdup(current_fd->str
libft/get_next_line/get_next_line.c:				+ ((endl + 1) - current_fd->str));
libft/get_next_line/get_next_line.c:		free(current_fd->str);
libft/get_next_line/get_next_line.c:		current_fd->str = NULL;
libft/get_next_line/get_next_line.c:	if (current_fd->str)
libft/get_next_line/get_next_line.c:		*line = ft_strjoin(current_fd->str, buff);
libft/get_next_line/get_next_line.c:		free(current_fd->str);
libft/get_next_line/get_next_line.c:		current_fd->str = NULL;
libft/get_next_line/get_next_line.c:			current_fd->str = ft_strdup(buff + ((endl + 1) - buff));
libft/get_next_line/get_next_line.c:	if (!current_fd->str)
libft/get_next_line/get_next_line.c:			current_fd->str = ft_strdup(buff + ((endl + 1) - buff));
libft/get_next_line/get_next_line.c:		while (tmp->next)
libft/get_next_line/get_next_line.c:			if (tmp->fd == fd)
libft/get_next_line/get_next_line.c:			tmp = tmp->next;
libft/get_next_line/get_next_line.c:		if (tmp->fd == fd)
libft/get_next_line/get_next_line.c:		if (!(tmp->next = (t_gnl*)malloc(sizeof(struct s_gnl))))
libft/get_next_line/get_next_line.c:		tmp = tmp->next;
libft/get_next_line/get_next_line.c:	tmp->fd = fd;
libft/get_next_line/get_next_line.c:	tmp->str = NULL;
libft/get_next_line/get_next_line.c:	tmp->next = NULL;
libft/get_next_line/get_next_line.c:	if (current_fd->str)
libft/get_next_line/get_next_line.c:		tmp = current_fd->str;
libft/get_next_line/get_next_line.c:		current_fd->str = ft_strjoin(current_fd->str, buff);
libft/get_next_line/get_next_line.c:		current_fd->str = ft_strdup(buff);
libft/get_next_line/get_next_line.c:	if (current_fd->str != NULL && check_str(current_fd, line) == 1)
libft/get_next_line/get_next_line.c:	while ((rd = read(current_fd->fd, buff, BUFF_SIZE)) > 0)
libft/get_next_line/get_next_line.c:		if (loop(rd, current_fd, buff, line) == 1 || rd == -1)
libft/get_next_line/get_next_line.c:			return (rd == -1 ? -1 : 1);
libft/get_next_line/get_next_line.c:	if (current_fd->str == NULL)
libft/get_next_line/get_next_line.c:	if (current_fd->str != NULL)
libft/get_next_line/get_next_line.c:		*line = ft_strdup(current_fd->str);
libft/get_next_line/get_next_line.c:		free(current_fd->str);
libft/get_next_line/get_next_line.c:		current_fd->str = NULL;
libft/libf/convert_to_d.c:		nbr = str[0] - '0';
libft/libf/convert_to_d.c:				: ft_strsub(tab, i + 1, ft_strlen(tab) - i)));
libft/libf/convert_to_d.c:	i = -1;
libft/libf/convert_to_d.c:		result += ft_iterative_power(base, --len) * get_nbr(&point[i]);
libft/libf/display_int_tab.c:	i = -1;
libft/libf/ft_atoi.c:	if (*str == '-' || *str == '+')
libft/libf/ft_atoi.c:		if (*str == '-')
libft/libf/ft_atoi.c:			sign = -1;
libft/libf/ft_atoi.c:		result = result * 10 + (*str - '0');
libft/libf/ft_display_tab.c:	i = -1;
libft/libf/ft_errormsg.c:	return (-1);
libft/libf/ft_free.c:	i = -1;
libft/libf/ft_itoa.c:		str[--len] = '\0';
libft/libf/ft_itoa.c:		while (len--)
libft/libf/ft_itoa.c:			str[0] = '-';
libft/libf/ft_itoa.c:	if (n == -2147483648)
libft/libf/ft_itoa.c:		return (ft_strdup("-2147483648"));
libft/libf/ft_itoa.c:		n *= -1;
libft/libf/ft_itoa_base.c:			result[len - i] = str[(n % base)];
libft/libf/ft_lstadd.c:	new->next = *alst;
libft/libf/ft_lstdel.c:			next = ptr->next;
libft/libf/ft_lstdel.c:			del(ptr->content, ptr->content_size);
libft/libf/ft_lstdelone.c:		del((*alst)->content, (*alst)->content_size);
libft/libf/ft_lstiter.c:			ptr = ptr->next;
libft/libf/ft_lstmap.c:		ptr = ft_lstnew(f(lst)->content, f(lst)->content_size);
libft/libf/ft_lstmap.c:			next_list->next = ptr;
libft/libf/ft_lstmap.c:		lst = lst->next;
libft/libf/ft_lstnew.c:		new->content = (void*)malloc(sizeof(content_size));
libft/libf/ft_lstnew.c:		ft_memcpy(new->content, content, content_size);
libft/libf/ft_lstnew.c:		new->content_size = content_size;
libft/libf/ft_lstnew.c:		new->next = NULL;
libft/libf/ft_lstnew.c:		new->content = NULL;
libft/libf/ft_lstnew.c:		new->content_size = 0;
libft/libf/ft_lstnew.c:		new->next = NULL;
libft/libf/ft_memccpy.c:	while (n--)
libft/libf/ft_memchr.c:	while (n--)
libft/libf/ft_memcmp.c:	while (n--)
libft/libf/ft_memcmp.c:			return (*st1 - *st2);
libft/libf/ft_memcpy.c:	while (n-- > 0)
libft/libf/ft_memmove.c:		dst1 += (len - 1);
libft/libf/ft_memmove.c:		src1 += (len - 1);
libft/libf/ft_memmove.c:		while (len--)
libft/libf/ft_memmove.c:			dst1--;
libft/libf/ft_memmove.c:			src1--;
libft/libf/ft_memmove.c:	while (len--)
libft/libf/ft_memset.c:	while (len--)
libft/libf/ft_putnbr.c:		ft_putchar('-');
libft/libf/ft_putnbr.c:		nb = -nb;
libft/libf/ft_putnbr_fd.c:		ft_putchar_fd('-', fd);
libft/libf/ft_putnbr_fd.c:		nb = -nb;
libft/libf/ft_sort_int_tab.c:		while (i < size - 1)
libft/libf/ft_strcmp.c:			return ((unsigned char)s1[i] - (unsigned char)s2[i]);
libft/libf/ft_strcmp.c:	return ((unsigned char)s1[i] - (unsigned char)s2[i]);
libft/libf/ft_strdigit.c:	i = -1;
libft/libf/ft_streplace.c:	i = -1;
libft/libf/ft_strlcat.c:	max = size - len_d;
libft/libf/ft_strlcat.c:		while (len_d + i < size - 1)
libft/libf/ft_strlcat.c:	? size - len_d + ft_strlen(dst) + ft_strlen(src) : len_s + len_d);
libft/libf/ft_strncat.c:		n--;
libft/libf/ft_strncmp.c:	i = -1;
libft/libf/ft_strncmp.c:	while (s1[++i] && s1[i] == s2[i] && i < n - 1)
libft/libf/ft_strncmp.c:	return ((unsigned char)s1[i] - (unsigned char)s2[i]);
libft/libf/ft_strrev.c:		s[j] = str[--i];
libft/libf/ft_strsplit.c:			if (s[i - 1] != c && s[i - 1] != '\t')
libft/libf/ft_strsplit.c:			if (s[i - 1] != c && s[i - 1] != '\t')
libft/libf/ft_strsplit.c:	tab = (char*)malloc(sizeof(char) * (end - start + 1));
libft/libf/ft_strtrim.c:		len = ft_strlen(s) - 1;
libft/libf/ft_strtrim.c:			len--;
libft/libf/ft_strtrim.c:			return (ft_strsub(s1, i, len - i + 1));
libft/libf/ft_strtrimf.c:	len = ft_strlen(s) - 1;
libft/libf/ft_strtrimf.c:		len--;
libft/libf/ft_strtrimf.c:		s1 = ft_strsub(s1, i, len - i + 1);
libft/libf/ft_toupper.c:		c = c - 32;
libft/printf/fd_printf.c:	b->pos = 0;
libft/printf/fd_printf.c:	b->len = 0;
libft/printf/fd_printf.c:		b->buff[i] = '\0';
libft/printf/fd_printf.c:	i = -1;
libft/printf/fd_printf.c:		b.len = -1;
libft/printf/fd_printf.c:		if (b.buff[i] == -1)
libft/printf/ft_buffill.c:	i = -1;
libft/printf/ft_buffill.c:		if (b->pos == 1023)
libft/printf/ft_buffill.c:		b->buff[b->pos++] = tmp[i];
libft/printf/ft_color.c:	b->error = 0;
libft/printf/ft_conv_b.c:		if (!ft_strchr(str, '-'))
libft/printf/ft_conv_b.c:	flags.pr -= ft_strlen(rec);
libft/printf/ft_conv_b.c:	flags.mfw -= ft_strlen(rec) + flags.diez;
libft/printf/ft_conv_b.c:	flags.mfw -= (flags.pr > 0 ? flags.pr : 0);
libft/printf/ft_conv_b.c:	b->len += ft_strlen(rec);
libft/printf/ft_conv_b.c:	i = -1;
libft/printf/ft_conv_b.c:	b->error = 0;
libft/printf/ft_conv_c.c:	i = -1;
libft/printf/ft_conv_c.c:	while (++i < n - 1)
libft/printf/ft_conv_c.c:		if (b->pos == 1023)
libft/printf/ft_conv_c.c:		b->buff[b->pos++] = (c == 0 ? -1 : c);
libft/printf/ft_conv_c.c:		if (b->pos == 1023)
libft/printf/ft_conv_c.c:		b->buff[b->pos++] = (c == 0 ? -1 : c);
libft/printf/ft_conv_c.c:	b->len += n;
libft/printf/ft_conv_c.c:		if (ft_isdigit(str[(*i)]) != 0 && str[(*i) - 1] != '.')
libft/printf/ft_conv_c.c:			(ft_strchr(str, '-') == NULL ?
libft/printf/ft_conv_c.c:	b->error = 0;
libft/printf/ft_conv_d.c:	flags.pl = (ft_strchr(str, '+') && nbr > -1 ? 1 : 0);
libft/printf/ft_conv_d.c:		if (!ft_strchr(str, '-'))
libft/printf/ft_conv_d.c:	flags.pr -= ft_strlen(rec);
libft/printf/ft_conv_d.c:	flags.mfw -= ft_strlen(rec) + flags.min;
libft/printf/ft_conv_d.c:	flags.mfw -= (ft_strchr(str, ' ') ? 1 : 0);
libft/printf/ft_conv_d.c:	flags.mfw -= (flags.pr > 0 ? flags.pr : 0) + flags.pl;
libft/printf/ft_conv_d.c:	b->len += (int)ft_strlen(rec);
libft/printf/ft_conv_d.c:	i = -1;
libft/printf/ft_conv_d.c:	i = -1;
libft/printf/ft_conv_d.c:	b->error = 0;
libft/printf/ft_conv_lc.c:	if (ft_strchr(str, '-'))
libft/printf/ft_conv_lc.c:			if (b->pos == 1023)
libft/printf/ft_conv_lc.c:			b->buff[b->pos++] = ' ';
libft/printf/ft_conv_lc.c:			if (b->pos == 1023)
libft/printf/ft_conv_lc.c:			b->buff[b->pos++] = ' ';
libft/printf/ft_conv_lc.c:		nul[0] = -1;
libft/printf/ft_conv_lc.c:		b->len += 1;
libft/printf/ft_conv_lc.c:	i = -1;
libft/printf/ft_conv_lc.c:		if (ft_isdigit(str[i]) != 0 && str[i - 1] != '.')
libft/printf/ft_conv_lc.c:	nb -= ft_strlen(tmp);
libft/printf/ft_conv_lc.c:	b->len += (nb < 0 ? 0 : nb);
libft/printf/ft_conv_lc.c:		b->error = 1;
libft/printf/ft_conv_lc.c:	i = -1;
libft/printf/ft_conv_lc.c:	b->error = 0;
libft/printf/ft_conv_ls.c:		if (b->pos == 1023)
libft/printf/ft_conv_ls.c:		b->buff[b->pos++] = ' ';
libft/printf/ft_conv_ls.c:		if (ft_isdigit(str[i]) != 0 && str[i - 1] != '.')
libft/printf/ft_conv_ls.c:		nb -= ft_wstrlen(rec);
libft/printf/ft_conv_ls.c:	b->len += (nb > 0 ? nb : 0);
libft/printf/ft_conv_ls.c:	if (!ft_strchr(str, '-') && nb > 0)
libft/printf/ft_conv_ls.c:	if (ft_strchr(str, '-') && nb > 0)
libft/printf/ft_conv_ls.c:	i = -1;
libft/printf/ft_conv_ls.c:				b->error = 1;
libft/printf/ft_conv_ls.c:	if (b->error == 0)
libft/printf/ft_conv_ls.c:	i = -1;
libft/printf/ft_conv_ls.c:	b->error = 0;
libft/printf/ft_conv_n.c:	b->error = 0;
libft/printf/ft_conv_n.c:	*n = b->len;
libft/printf/ft_conv_o.c:		if (!ft_strchr(str, '-'))
libft/printf/ft_conv_o.c:	flags.pr -= ft_strlen(rec);
libft/printf/ft_conv_o.c:	flags.mfw -= ft_strlen(rec) + flags.diez;
libft/printf/ft_conv_o.c:	flags.mfw -= (flags.pr > 0 ? flags.pr : 0);
libft/printf/ft_conv_o.c:	b->len += ft_strlen(rec);
libft/printf/ft_conv_o.c:	i = -1;
libft/printf/ft_conv_o.c:	i = -1;
libft/printf/ft_conv_o.c:	b->error = 0;
libft/printf/ft_conv_p.c:		if (!ft_strchr(str, '-'))
libft/printf/ft_conv_p.c:	flags.pr -= ft_strlen(rec);
libft/printf/ft_conv_p.c:	flags.mfw -= ft_strlen(rec) + 2;
libft/printf/ft_conv_p.c:	flags.mfw -= (ft_strchr(str, ' ') ? 1 : 0);
libft/printf/ft_conv_p.c:	flags.mfw -= (flags.pr > 0 ? flags.pr : 0);
libft/printf/ft_conv_p.c:	b->len += ft_strlen(rec) + 2;
libft/printf/ft_conv_p.c:	i = -1;
libft/printf/ft_conv_p.c:	b->error = 0;
libft/printf/ft_conv_r.c:			if (b->pos == 1023)
libft/printf/ft_conv_r.c:			b->buff[b->pos++] = ' ';
libft/printf/ft_conv_r.c:			if (b->pos == 1023)
libft/printf/ft_conv_r.c:			b->buff[b->pos++] = c;
libft/printf/ft_conv_r.c:	b->len += n;
libft/printf/ft_conv_r.c:		if (ft_isdigit(str[(*i)]) != 0 && str[(*i) - 1] != '.')
libft/printf/ft_conv_r.c:			(ft_strchr(str, '-') == NULL ?
libft/printf/ft_conv_r.c:	i = -1;
libft/printf/ft_conv_r.c:	b->error = 0;
libft/printf/ft_conv_r.c:		if (ft_strchr(str, '-') == NULL)
libft/printf/ft_conv_s.c:	if (ft_strchr(str, '-'))
libft/printf/ft_conv_s.c:			if (b->pos == 1023)
libft/printf/ft_conv_s.c:			b->buff[b->pos++] = ' ';
libft/printf/ft_conv_s.c:			if (b->pos == 1023)
libft/printf/ft_conv_s.c:			b->buff[b->pos++] = ' ';
libft/printf/ft_conv_s.c:	i = -1;
libft/printf/ft_conv_s.c:		if (ft_isdigit(str[i]) != 0 && str[i - 1] != '.')
libft/printf/ft_conv_s.c:	nb -= save;
libft/printf/ft_conv_s.c:	b->len += (nb < 0 ? 0 : nb);
libft/printf/ft_conv_s.c:	nb = -1;
libft/printf/ft_conv_s.c:	i = -1;
libft/printf/ft_conv_s.c:	b->len += nb;
libft/printf/ft_conv_s.c:	i = -1;
libft/printf/ft_conv_s.c:	b->error = 0;
libft/printf/ft_conv_u.c:	flags.pl = (ft_strchr(str, '+') && nbr > -1 ? 1 : 0);
libft/printf/ft_conv_u.c:		if (!ft_strchr(str, '-'))
libft/printf/ft_conv_u.c:	flags.pr -= ft_strlen(rec);
libft/printf/ft_conv_u.c:	flags.mfw -= ft_strlen(rec);
libft/printf/ft_conv_u.c:	flags.mfw -= (flags.pr > 0 ? flags.pr : 0);
libft/printf/ft_conv_u.c:	b->len += (int)ft_strlen(rec);
libft/printf/ft_conv_u.c:	i = -1;
libft/printf/ft_conv_u.c:	i = -1;
libft/printf/ft_conv_u.c:	b->error = 0;
libft/printf/ft_conv_x.c:		if (!ft_strchr(str, '-'))
libft/printf/ft_conv_x.c:	flags.pr -= ft_strlen(rec);
libft/printf/ft_conv_x.c:	flags.mfw -= ft_strlen(rec) + flags.diez;
libft/printf/ft_conv_x.c:	flags.mfw -= (flags.pr > 0 ? flags.pr : 0);
libft/printf/ft_conv_x.c:	b->len += ft_strlen(rec);
libft/printf/ft_conv_x.c:	i = -1;
libft/printf/ft_conv_x.c:	i = -1;
libft/printf/ft_conv_x.c:	b->error = 0;
libft/printf/ft_direct.c:	b->error = 0;
libft/printf/ft_direct.c:		if (b->pos == 1023)
libft/printf/ft_direct.c:			if (b->error == 1)
libft/printf/ft_direct.c:				return (-1);
libft/printf/ft_direct.c:			b->buff[b->pos] = format[i];
libft/printf/ft_direct.c:			b->pos++;
libft/printf/ft_direct.c:			b->len++;
libft/printf/ft_do_mfw.c:	i = -1;
libft/printf/ft_do_mfw.c:		if (b->pos == 1023)
libft/printf/ft_do_mfw.c:		b->buff[b->pos++] = c;
libft/printf/ft_do_mfw.c:	b->len += flags.mfw;
libft/printf/ft_do_prec.c:	i = -1;
libft/printf/ft_do_prec.c:	if (flags->zer == 0 && flags->diez == 2 && flags->nbr == 1)
libft/printf/ft_do_prec.c:		b->len += 2;
libft/printf/ft_do_prec.c:		flags->diez = 0;
libft/printf/ft_do_prec.c:	while (++i < flags->pr)
libft/printf/ft_do_prec.c:		if (b->pos == 1023)
libft/printf/ft_do_prec.c:		b->buff[b->pos++] = '0';
libft/printf/ft_do_prec.c:	b->len += flags->pr;
libft/printf/ft_findc.c:	valid = " .0123456789hljz#-+*";
libft/printf/ft_findc.c:			(*i) = save - 1;
libft/printf/ft_findc.c:	(*i) = save - 1;
libft/printf/ft_get_wchar.c:	b->len += 4;
libft/printf/ft_get_wchar.c:	b->len += 3;
libft/printf/ft_get_wchar.c:	b->len += 2;
libft/printf/ft_get_wchar.c:	b->len += 1;
libft/printf/ft_get_wchar.c:		bits--;
libft/printf/ft_itoa_base_long_nm.c:			result[len - i] = str[(n % base)];
libft/printf/ft_itoa_base_ulong_nm.c:		result[len - i] = str[(n % base)];
libft/printf/ft_itoa_base_ulong_nm.c:	result[len - 1] = 0;
libft/printf/ft_itoa_long_nm.c:	i = -1;
libft/printf/ft_itoa_long_nm.c:	i = -1;
libft/printf/ft_itoa_long_nm.c:	if (n == -9223372036854775807 - 1)
libft/printf/ft_itoa_long_nm.c:			n *= -1;
libft/printf/ft_itoa_long_nm.c:		str[0] = '-';
libft/printf/ft_itoa_long_nm.c:		str[len--] = '\0';
libft/printf/ft_itoa_long_nm.c:		str[len--] = '0' + n % 10;
libft/printf/ft_itoa_long_nm.c:			str[len--] = '0' + n % 10;
libft/printf/ft_itoa_ulong_nm.c:	str[len--] = '\0';
libft/printf/ft_itoa_ulong_nm.c:	str[len--] = '0' + n % 10;
libft/printf/ft_itoa_ulong_nm.c:		str[len--] = '0' + n % 10;
libft/printf/ft_maj.c:	i = -1;
libft/printf/ft_maj.c:			(*rec)[i] -= 32;
libft/printf/ft_mfw.c:		if (ft_isdigit(str[i]) != 0 && str[i - 1] != '.' && str[i] != '0')
libft/printf/ft_order_b.c:		if (!ft_strchr(str, '-'))
libft/printf/ft_order_b.c:		if (ft_strchr(str, '-'))
libft/printf/ft_order_d.c:		if (!ft_strchr(str, '-'))
libft/printf/ft_order_d.c:		if (ft_strchr(str, '-'))
libft/printf/ft_order_o.c:		b->len += 1;
libft/printf/ft_order_o.c:		if (!ft_strchr(str, '-'))
libft/printf/ft_order_o.c:		b->len += 1;
libft/printf/ft_order_o.c:		if (ft_strchr(str, '-'))
libft/printf/ft_order_p.c:		if (!ft_strchr(str, '-'))
libft/printf/ft_order_p.c:		if (ft_strchr(str, '-'))
libft/printf/ft_order_u.c:		if (!ft_strchr(str, '-'))
libft/printf/ft_order_u.c:		if (ft_strchr(str, '-'))
libft/printf/ft_order_x.c:		b->len += 2;
libft/printf/ft_order_x.c:		if (!ft_strchr(str, '-'))
libft/printf/ft_order_x.c:		b->len += 2;
libft/printf/ft_order_x.c:		if (ft_strchr(str, '-'))
libft/printf/ft_plusminus.c:		b->len += 1;
libft/printf/ft_plusminus.c:		ft_buffill(b, "-");
libft/printf/ft_plusminus.c:		b->len += 1;
libft/printf/ft_precision.c:	i = -1;
libft/printf/ft_precision.c:				flags->pr = ft_atoi(&str[i + 1]);
libft/printf/ft_precision.c:				flags->isp = 1;
libft/printf/ft_printf.c:	b->pos = 0;
libft/printf/ft_printf.c:	b->len = 0;
libft/printf/ft_printf.c:		b->buff[i] = '\0';
libft/printf/ft_printf.c:	i = -1;
libft/printf/ft_printf.c:		b.len = -1;
libft/printf/ft_printf.c:		if (b.buff[i] == -1)
libft/printf/ft_reset.c:	i = -1;
libft/printf/ft_reset.c:	while (b->buff[++i])
libft/printf/ft_reset.c:		if (b->buff[i] == -1)
libft/printf/ft_reset.c:			b->buff[i] = '\0';
libft/printf/ft_reset.c:	write(b->fd, b->buff, 1023);
libft/printf/ft_reset.c:	b->pos = 0;
libft/printf/ft_reset.c:		b->buff[i] = 0;
libft/printf/ft_space.c:	if (ft_strchr(str, ' ') && flags.pl == 0 && nbr > -1)
libft/printf/ft_space.c:		b->len += 1;
libft/printf/ft_tmp_ls.c:		b->len += 6;
libft/printf/ft_whichconv.c:	ptf->c = ft_findc(format, &len);
libft/printf/ft_whichconv.c:	if (ptf->c == '\0')
libft/printf/ft_whichconv.c:	while (ptf->c != g_tab[k].c && g_tab[k].c != 0)
libft/printf/ft_wstrlen.c:		bits--;
libft/printf/ft_wstrlen.c:	i = -1;
srcs/AST/ast_tools.c:		(*ast)->str = ft_strdup(str);
srcs/AST/ast_tools.c:		(*ast)->str = NULL;
srcs/AST/ast_tools.c:	(*ast)->type = type;
srcs/AST/ast_tools.c:	(*ast)->left = NULL;
srcs/AST/ast_tools.c:	(*ast)->right = NULL;
srcs/AST/ast_tools.c:		tmp_first = tmp->n;
srcs/AST/ast_tools.c:		tmp = tmp->n;
srcs/AST/ast_tools.c:	while (tmp && (tmp->type != QM))
srcs/AST/ast_tools.c:		tmp = tmp->n;
srcs/AST/creat_ast.c:	init_ast(&(*ast)->right, NULL, 0);
srcs/AST/creat_ast.c:	(*ast) = (*ast)->right;
srcs/AST/creat_ast.c:	(*lst) = (*next)->n;
srcs/AST/creat_ast.c:			tmp_ast->type = QM_SEQ;
srcs/AST/creat_ast.c:			if (tmp->n)
srcs/AST/creat_ast.c:		tmp ? (tmp = tmp->n) : 0;
srcs/AST/creat_ast.c:	tmp_ast->type == 0 ? secondary_sequence(&tmp_ast, &tmp_first, &tmp) : 0;
srcs/AST/creat_ast.c:		if (tmp->type == AND || tmp->type == OR)
srcs/AST/creat_ast.c:			tmp_ast->type = AND_OR;
srcs/AST/creat_ast.c:		tmp = tmp->n;
srcs/AST/creat_ast.c:	if (tmp_ast->type == 0)
srcs/AST/creat_ast.c:		if (tmp->type == BG)
srcs/AST/creat_ast.c:			tmp_ast->type = BG_SEQ;
srcs/AST/creat_ast.c:		tmp = tmp->n;
srcs/AST/creat_ast.c:	if (tmp_ast->type == 0)
srcs/AST/creat_ast.c:		if (tmp->type == PIPE)
srcs/AST/creat_ast.c:			tmp_ast->type = PIPE_SEQ;
srcs/AST/creat_ast.c:		tmp = tmp->n;
srcs/AST/creat_ast.c:	if (tmp_ast->type == 0)
srcs/AST/creat_ast.c:		tmp_ast->type = CMD_SEQ;
srcs/AST/creat_bg_seq.c:	while (tmp && tmp != *stop && (tmp->type != BG))
srcs/AST/creat_bg_seq.c:		tmp = tmp->n;
srcs/AST/creat_bg_seq.c:		init_ast(&tmp_ast->right, tmp->str, tmp->type);
srcs/AST/creat_bg_seq.c:		tmp_ast = tmp_ast->right;
srcs/AST/creat_bg_seq.c:		init_ast(&tmp_ast->left, NULL, 0);
srcs/AST/creat_bg_seq.c:		quaternary_sequence(&tmp_ast->left, lst, &tmp);
srcs/AST/creat_bg_seq.c:		if (tmp->n != NULL)
srcs/AST/creat_bg_seq.c:			bg_sequence(&tmp_ast, &tmp->n, sep);
srcs/AST/creat_bg_seq.c:		init_ast(&tmp_ast->right, NULL, 0);
srcs/AST/creat_bg_seq.c:		quaternary_sequence(&tmp_ast->right, lst, sep);
srcs/AST/creat_io_seq.c:	if (tmp->type == IO_N)
srcs/AST/creat_io_seq.c:		tmp = tmp->n->n;
srcs/AST/creat_io_seq.c:		tmp = tmp->n;
srcs/AST/creat_io_seq.c:	while (tmp && tmp != *stop && tmp->type != IO_N && (tmp->type < RDIR ||
srcs/AST/creat_io_seq.c:	tmp->type > BGRE))
srcs/AST/creat_io_seq.c:		tmp = tmp->n;
srcs/AST/creat_io_seq.c:	init_ast(&t_a->right, t_f->type == IO_N ? t_f->str :
srcs/AST/creat_io_seq.c:	NULL, t_f->type == IO_N ? t_f->n->type : t_f->type);
srcs/AST/creat_io_seq.c:	t_a = t_a->right;
srcs/AST/creat_io_seq.c:	init_ast(&t_a->left, t_f->type == IO_N ?
srcs/AST/creat_io_seq.c:	t_f->n->n->str : t_f->n->str, FIL);
srcs/AST/creat_io_seq.c:		io = tmp->type == IO_N ? tmp : NULL;
srcs/AST/creat_io_seq.c:		rdir = tmp->type == IO_N ? tmp->n : tmp;
srcs/AST/creat_io_seq.c:		t_f = tmp->type == IO_N ? tmp->n->n : tmp->n;
srcs/AST/creat_io_seq.c:		init_ast(&t_a->right, io ? io->str : NULL, io ?
srcs/AST/creat_io_seq.c:		io->n->type : rdir->type);
srcs/AST/creat_io_seq.c:		t_a = t_a->right;
srcs/AST/creat_io_seq.c:		init_ast(&t_a->left, io ? io->n->n->str : rdir->n->str, FIL);
srcs/AST/creat_pipe_seq.c:	while (tmp && tmp != *stop && (tmp->type != PIPE))
srcs/AST/creat_pipe_seq.c:		tmp = tmp->n;
srcs/AST/creat_pipe_seq.c:		init_ast(&tmp_ast->right, tmp->str, tmp->type);
srcs/AST/creat_pipe_seq.c:		tmp_ast = tmp_ast->right;
srcs/AST/creat_pipe_seq.c:		init_ast(&tmp_ast->left, NULL, CMD_SEQ);
srcs/AST/creat_pipe_seq.c:		command_sequence(&tmp_ast->left, &tmp_first, &tmp);
srcs/AST/creat_pipe_seq.c:		pipe_sequence(&tmp_ast, &tmp->n, sep);
srcs/AST/creat_pipe_seq.c:		init_ast(&tmp_ast->right, NULL, CMD_SEQ);
srcs/AST/creat_pipe_seq.c:		command_sequence(&tmp_ast->right, lst, sep);
srcs/AST/creat_pipe_seq.c:	init_ast(&tmp_ast->left, tmp->str,
srcs/AST/creat_pipe_seq.c:	ft_strrchr(tmp->str, '/') ? CMD_NAME_ABS : CMD_NAME_RLT);
srcs/AST/creat_pipe_seq.c:	tmp = tmp->n;
srcs/AST/creat_pipe_seq.c:		init_ast(&tmp_ast->right, tmp->str, CMD_ARG);
srcs/AST/creat_pipe_seq.c:		if (tmp->n != *sep)
srcs/AST/creat_pipe_seq.c:			tmp_ast = tmp_ast->right;
srcs/AST/creat_pipe_seq.c:		tmp = tmp->n;
srcs/AST/creat_pipe_seq.c:	while (tmp && (tmp->type == WORD || tmp->type == QUOTE ||
srcs/AST/creat_pipe_seq.c:		tmp->type == DQUOTE || tmp->type == LOCAL))
srcs/AST/creat_pipe_seq.c:		tmp = tmp->n;
srcs/AST/creat_pipe_seq.c:	init_ast(&tmp_ast->left, NULL, SIMP_CMD);
srcs/AST/creat_pipe_seq.c:	simple_sequence(&tmp_ast->left, lst, &tmp);
srcs/AST/creat_pipe_seq.c:		init_ast(&(*ast)->right, NULL, IO_SEQ);
srcs/AST/creat_pipe_seq.c:		io_sequence(&(*ast)->right, &tmp, sep);
srcs/AST/creat_qm_oa.c:		while (tmp && (tmp->type != QM) && tmp != *sep)
srcs/AST/creat_qm_oa.c:			tmp = tmp->n;
srcs/AST/creat_qm_oa.c:		(*lst) = tmp->n;
srcs/AST/creat_qm_oa.c:		return (tmp->n);
srcs/AST/creat_qm_oa.c:		while (tmp && tmp != *sep && (tmp->type != AND && tmp->type != OR))
srcs/AST/creat_qm_oa.c:			tmp = tmp->n;
srcs/AST/creat_qm_oa.c:		(*lst) = tmp->n;
srcs/AST/creat_qm_oa.c:		return (tmp->n);
srcs/AST/creat_qm_oa.c:		init_ast(&tmp_ast->left, new_sep->str, new_sep->type);
srcs/AST/creat_qm_oa.c:		tmp_ast = tmp_ast->left;
srcs/AST/creat_qm_oa.c:		init_ast(&tmp_ast->right, NULL, 0);
srcs/AST/creat_qm_oa.c:		secondary_sequence(&tmp_ast->right, &tmp_first, &tmp);
srcs/AST/creat_qm_oa.c:		init_ast(&tmp_ast->left, NULL, 0);
srcs/AST/creat_qm_oa.c:		secondary_sequence(&tmp_ast->left, lst, sep);
srcs/AST/creat_qm_oa.c:		init_ast(&tmp_ast->left, new_sep->str, new_sep->type);
srcs/AST/creat_qm_oa.c:		tmp_ast = tmp_ast->left;
srcs/AST/creat_qm_oa.c:		init_ast(&tmp_ast->right, NULL, 0);
srcs/AST/creat_qm_oa.c:		tertiary_sequence(&tmp_ast->right, &tmp_first, &tmp);
srcs/AST/creat_qm_oa.c:		init_ast(&tmp_ast->left, NULL, 0);
srcs/AST/creat_qm_oa.c:		tertiary_sequence(&tmp_ast->left, lst, sep);
srcs/AST/destroy_ast.c:	tmp->left ? destroy_ast(&tmp->left) : 0;
srcs/AST/destroy_ast.c:	tmp->right ? destroy_ast(&tmp->right) : 0;
srcs/AST/destroy_ast.c:	tmp->str ? ft_strdel(&tmp->str) : 0;
srcs/AST/destroy_ast.c:		save = tmp->n;
srcs/AST/destroy_ast.c:		ft_strdel(&tmp->str);
srcs/builtins/builtin_env.c:	i = -1;
srcs/builtins/builtin_env.c:			ft_putstr_fd("env : illegal option -- ", 2);
srcs/builtins/builtin_env.c:			(*flags) = -1;
srcs/builtins/builtin_env.c:	while (tmp && tmp->str[0] == '-')
srcs/builtins/builtin_env.c:		if (tmp->str[1] != '-')
srcs/builtins/builtin_env.c:			env_opt(tmp->str, flags);
srcs/builtins/builtin_env.c:			if ((*flags) == -1)
srcs/builtins/builtin_env.c:		else if (tmp->str[2] == '\0')
srcs/builtins/builtin_env.c:			return (tmp->right);
srcs/builtins/builtin_env.c:		tmp = tmp->right;
srcs/builtins/builtin_env.c:	new_cmd = ft_strdup(tmp->str);
srcs/builtins/builtin_env.c:	(tmp = tmp->right) ?
srcs/builtins/builtin_env.c:		new_cmd = ft_strjoinf(new_cmd, tmp->str, 1);
srcs/builtins/builtin_env.c:		if ((tmp = tmp->right))
srcs/builtins/builtin_env.c:	if (find_cmd_bin(cmd, (value = ft_strsplit(path->value, ':'))) == 0)
srcs/builtins/builtin_env.c:		return (ft_errormsg("21sh: ", (*cmd)->str, ": Command not found."));
srcs/builtins/builtin_env.c:	(*cmd)->type = CMD_NAME_ABS;
srcs/builtins/builtin_env.c:		if ((new_ast->left->left->type == CMD_NAME_ABS ?
srcs/builtins/builtin_env.c:		find_bin(&new_ast->left->left) :
srcs/builtins/builtin_env.c:		find_rlt(&new_ast->left->left, env)) == 1)
srcs/builtins/builtin_env.c:	if (find_node(env, (*ast)->str, NULL))
srcs/builtins/builtin_env.c:			if (ft_strcmp((*ast)->str, tmp->var) != 0)
srcs/builtins/builtin_env.c:				tmp_env->var = ft_strdup(tmp->var);
srcs/builtins/builtin_env.c:				tmp_env->value = ft_strdup(tmp->value);
srcs/builtins/builtin_env.c:				if (tmp->next && ft_strcmp((*ast)->str, tmp->next->var) == 0)
srcs/builtins/builtin_env.c:					tmp = tmp->next;
srcs/builtins/builtin_env.c:				if (tmp->next && ft_strcmp((*ast)->str, tmp->next->var) != 0)
srcs/builtins/builtin_env.c:					tmp_env = prout(&tmp_env->next);
srcs/builtins/builtin_env.c:				tmp = tmp->next;
srcs/builtins/builtin_env.c:		tmp_env->next = NULL;
srcs/builtins/builtin_env.c:	return ((*ast)->right);
srcs/builtins/builtin_env.c:		if (test(tmp->str) == 1)
srcs/builtins/builtin_env.c:			tmp = tmp->right;
srcs/builtins/builtin_env.c:		ft_putendl(tmp->str);
srcs/builtins/builtin_env.c:		tmp = tmp->right;
srcs/builtins/builtin_env.c:	tmp = env_option(&tmp->left->right, &flag);
srcs/builtins/builtin_env.c:	if (flag != -1)
srcs/builtins/builtin_hash.c:		save = tmp->next;
srcs/builtins/builtin_hash.c:		ft_strdel(&tmp->path);
srcs/builtins/builtin_hash.c:				tmp->hits = 0;
srcs/builtins/builtin_hash.c:				tmp = tmp->next;
srcs/builtins/builtin_hash.c:				ft_printf("%4d\t%s\n", tmp->hits, tmp->path);
srcs/builtins/builtin_hash.c:				tmp = tmp->next;
srcs/builtins/builtin_hash.c:	i = count_opt(&(*ast)->left->right);
srcs/builtins/builtin_hash.c:		if ((i = check_opt((*ast)->left->right->str)) == 1)
srcs/builtins/builtin_hash.c:			ft_errormsg("Usage: hash:", "-c = clean table", "-r : reset hits");
srcs/builtins/cd.c:		free(tmp->value);
srcs/builtins/cd.c:		tmp->value = ft_strdup(lst_at(env, "PWD")->value);
srcs/builtins/cd.c:		free(tmp->value);
srcs/builtins/cd.c:		tmp->value = ft_strdup(path);
srcs/builtins/cd.c:	if (lstat((*path), &st) == -1)
srcs/builtins/cd.c:		if ((access((*path), R_OK)) == -1)
srcs/builtins/cd.c:		if (chdir((*path)) == -1)
srcs/builtins/cd.c:	while (arg[(*i)] && arg[(*i)][0] == '-')
srcs/builtins/cd.c:		if (arg[(*i)][0] == '-' && ((arg[(*i)][1] == '-' && arg[(*i)][2] == 0)
srcs/builtins/cd.c:				return (fd_printf(2, "cd: -%c: invalid option\n",
srcs/builtins/cd.c:	i = -1;
srcs/builtins/cd.c:	(*path) = ft_strdup(lst_at(env, "PWD")->value);
srcs/builtins/cd.c:	(*path)[ft_strlen(*path) - 1] == '/' ?
srcs/builtins/cd.c:	(*path)[ft_strlen(*path) - 1] = 0 : 0;
srcs/builtins/cd.c:			while ((*path)[--len])
srcs/builtins/cd.c:		arg[ft_strlen(arg) - 1] == '/' ? arg[ft_strlen(arg) - 1] = 0 : 0;
srcs/builtins/cd.c:		(*path) = ft_strdup(lst_at(lstenv, "HOME")->value);
srcs/builtins/cd.c:	else if (arg[0] == '-' && arg[1] == 0)
srcs/builtins/cd.c:		(*path) = ft_strdup(lst_at(lstenv, "OLDPWD")->value);
srcs/builtins/cd.c:			(*path) = ft_strdup(lst_at(lstenv, "PWD")->value);
srcs/builtins/cd.c:			tmp = lst_at(lstenv, "PWD")->value;
srcs/builtins/cd.c:			(*path) = tmp[ft_strlen(tmp) - 1] == '/' ? ft_strjoin(tmp, arg)
srcs/builtins/cd.c:	if ((!(lst_at(lstenv, "PWD"))) && arg && arg[0] == '-' && arg[1] == 0)
srcs/builtins/cd.c:		&& arg && arg[0] == '-' && arg[1] == 0)
srcs/builtins/cd.c:	targ = creat_arg_env(&(*ast)->left->right);
srcs/builtins/echo.c:	i = -1;
srcs/builtins/echo.c:	while (save->next && ft_strcmp(save->var, tmp))
srcs/builtins/echo.c:		save = save->next;
srcs/builtins/echo.c:	if (!ft_strcmp(save->var, tmp))
srcs/builtins/echo.c:		return (ft_strjoin(save->value, arg + i));
srcs/builtins/echo.c:	i = -1;
srcs/builtins/echo.c:			i -= 1;
srcs/builtins/echo.c:	i = -1;
srcs/builtins/echo.c:	if (!(arg = creat_arg_env(&(*ast)->left->right)) || !arg[0])
srcs/builtins/echo.c:	i = (arg[0] && !ft_strcmp(arg[0], "-n") ? 1 : 0);
srcs/builtins/echo.c:	if (arg && arg[0] && !ft_strcmp(arg[0], "-n"))
srcs/builtins/env.c:		(*cmd) = (*cmd)->next;
srcs/builtins/env.c:		ft_strdel(&tmp->var);
srcs/builtins/env.c:		ft_strdel(&tmp->value);
srcs/builtins/env.c:			ft_putstr(lst->var);
srcs/builtins/env.c:			ft_putstr(lst->value);
srcs/builtins/env.c:			lst = lst->next;
srcs/builtins/env.c:	i = -1;
srcs/builtins/env.c:	i = -1;
srcs/builtins/env.c:		tmp->var = ft_strdup(envtab[0]);
srcs/builtins/env.c:		tmp->value = ft_strdup(envtab[1]);
srcs/builtins/env.c:			if (!(tmp->next = (t_env*)malloc(sizeof(t_env))))
srcs/builtins/env.c:			tmp = tmp->next;
srcs/builtins/env.c:	tmp ? tmp->next = NULL : 0;
srcs/builtins/exit.c:	if (!(arg = creat_arg_env(&(*ast)->left->right)))
srcs/builtins/exit.c:	i = (arg[0][0] == '-' && arg[0][1] ? 0 : -1);
srcs/builtins/exit.c:		g_loop = (g_loop > 255 ? g_loop - 256 : g_loop + 256);
srcs/builtins/export.c:	if (!loc || !(*ast)->left->right->str || !*env)
srcs/builtins/export.c:	while (loc && ft_strcmp(loc->var, (*ast)->left->right->str))
srcs/builtins/export.c:		loc = loc->n;
srcs/builtins/export.c:	while (tmp->next)
srcs/builtins/export.c:		tmp = tmp->next;
srcs/builtins/export.c:	if (!(tmp->next = (t_env *)malloc(sizeof(t_env))))
srcs/builtins/export.c:	tmp->next->var = ft_strdup(loc->var);
srcs/builtins/export.c:	tmp->next->value = ft_strdup(loc->val);
srcs/builtins/export.c:	tmp->next->next = NULL;
srcs/builtins/hash.c:	i = -1;
srcs/builtins/hash.c:	tmp_a = i == 1 ? (*ast) : (*ast)->left;
srcs/builtins/hash.c:	key = hash_cmd(tmp_a->str);
srcs/builtins/hash.c:			if (tmp->rlt_key == key || tmp->abs_key == key)
srcs/builtins/hash.c:				if (tmp_a->type == CMD_NAME_RLT ?
srcs/builtins/hash.c:					(!ft_strcmp(tmp_a->str, tmp->path)) :
srcs/builtins/hash.c:					(!ft_strcmp(tmp_a->str, ft_strrchr(tmp->path, '/'))))
srcs/builtins/hash.c:					tmp_a->str = ft_strdups(tmp->path, &tmp_a->str);
srcs/builtins/hash.c:					tmp->hits++;
srcs/builtins/hash.c:					if (isexec(tmp_a->str) == 1)
srcs/builtins/hash.c:			tmp = tmp->next;
srcs/builtins/hash.c:		p = (*job)->first_process;
srcs/builtins/hash.c:		key = hash_cmd(p->argv[0]);
srcs/builtins/hash.c:			if (tmp->abs_key == key)
srcs/builtins/hash.c:				if (!ft_strcmp(p->argv[0], tmp->path))
srcs/builtins/hash.c:					tmp->hits++;
srcs/builtins/hash.c:			tmp = tmp->next;
srcs/builtins/hash.c:	if (init_hash(&curr, (*job)->first_process->argv[0]))
srcs/builtins/hash.c:			while (tmp->next)
srcs/builtins/hash.c:				tmp = tmp->next;
srcs/builtins/hash.c:			tmp->next = curr;
srcs/builtins/hash.c:	i = -1;
srcs/builtins/hash_tools.c:	(*lst)->abs_key = hash_cmd(cmd);
srcs/builtins/hash_tools.c:	(*lst)->rlt_key = hash_cmd(ft_strrchr(cmd, '/') + 1);
srcs/builtins/hash_tools.c:	(*lst)->hits = 1;
srcs/builtins/hash_tools.c:	(*lst)->path = ft_strdup(cmd);
srcs/builtins/hash_tools.c:	(*lst)->next = NULL;
srcs/builtins/hash_tools.c:			tmp = tmp->right;
srcs/builtins/hash_tools.c:	if (ft_strcmp(opt, "-c") == 0)
srcs/builtins/hash_tools.c:	else if (ft_strcmp(opt, "-r") == 0)
srcs/builtins/history.c:/* 	i = -1; */
srcs/builtins/history.c:/* 	i = -1; */
srcs/builtins/history.c:/* 			return (fd_printf(2, "history: -%c: %s\n%s", arg[i][j], HO, HU)); */
srcs/builtins/history.c:/* 		return (fd_printf(2, "42sh: history: -d: option requires an argument\n")); */
srcs/builtins/history.c:/* 	i = -1; */
srcs/builtins/history.c:/* 		if (arg[i][0] == '-' && ((arg[i][1] == '-' && arg[i][2] == 0) */
srcs/builtins/history.c:/* 		if (arg[i][0] == '-') */
srcs/builtins/history.c:/* 		while ((*his)->p) */
srcs/builtins/history.c:/* 			(*his) = (*his)->p; */
srcs/builtins/history.c:/* 		while ((*his)->n) */
srcs/builtins/history.c:/* 			(*his) = (*his)->n; */
srcs/builtins/history.c:	/* while ((*his)->p) */
srcs/builtins/history.c:	/* 	(*his) = (*his)->p; */
srcs/builtins/history.c:	/* if ((targ = creat_arg_env(&(*ast)->left->right)) && get_opt(targ, &opt, &off)) */
srcs/builtins/history.c:	/* 	fd_printf(2, "history: cannot use more than one of -anrw\n"); */
srcs/builtins/history_no_opt.c:    while ((*his) && ft_strcmp((*his)->cmdl, ""))
srcs/builtins/history_no_opt.c:      ft_printf("    %d  %s\n", ++nbr, (*his)->cmdl);
srcs/builtins/history_no_opt.c:      (*his) = (*his)->n;
srcs/builtins/history_no_opt.c:    len = len - offset;
srcs/builtins/history_no_opt.c:    while (--len)
srcs/builtins/history_no_opt.c:      (*his) = (*his)->n;
srcs/builtins/history_no_opt.c:    while ((*his) && ft_strcmp((*his)->cmdl, ""))
srcs/builtins/history_no_opt.c:      ft_printf("    %d  %s\n", ++nbr, (*his)->cmdl);
srcs/builtins/history_no_opt.c:      (*his) = (*his)->n;
srcs/builtins/history_opt.c:/* /\* 		save = tmp->n; *\/ */
srcs/builtins/history_opt.c:/* /\* 		ft_strdel(&tmp->cmdl); *\/ */
srcs/builtins/history_opt.c:/* /\* 	(*his)->cmdl = ft_strdup(""); *\/ */
srcs/builtins/history_opt.c:/* /\* 	(*his)->add = 1; *\/ */
srcs/builtins/history_opt.c:/* /\* 	(*his)->p = NULL; *\/ */
srcs/builtins/history_opt.c:/* /\* 	(*his)->n = NULL; *\/ */
srcs/builtins/history_opt.c:/* /\* 	(*his)->len = 0; *\/ */
srcs/builtins/history_opt.c:/* /\* 	while (offset-- > 1) *\/ */
srcs/builtins/history_opt.c:/* /\* 		tmp = tmp->n; *\/ */
srcs/builtins/history_opt.c:/* /\* 	ft_strdel(&tmp->cmdl); *\/ */
srcs/builtins/history_opt.c:/* /\* 		save_prev->n = tmp->n; *\/ */
srcs/builtins/history_opt.c:/* /\* 		(*his) = tmp->n; *\/ */
srcs/builtins/history_opt.c:/* /\* 	tmp->n->p = save_prev; *\/ */
srcs/builtins/history_opt.c:/* /\* 	while ((*his)->p) *\/ */
srcs/builtins/history_opt.c:/* /\* 		(*his) = (*his)->p; *\/ */
srcs/builtins/history_opt.c:/* /\* 	if ((fd = open(".42sh_history", O_RDWR | O_APPEND | O_CREAT, 0700)) == -1) *\/ */
srcs/builtins/history_opt.c:/* /\* 			!tmp->add ? ft_putendl_fd(tmp->cmdl, fd) : 0; *\/ */
srcs/builtins/history_opt.c:/* /\* 			tmp = tmp->n; *\/ */
srcs/builtins/history_opt.c:/* /\* 	fd != -1 ? close(fd) : 0; *\/ */
srcs/builtins/history_opt.c:/* /\* 		tmp->cmdl = ft_strdup(line); *\/ */
srcs/builtins/history_opt.c:/* /\* 		tmp->add = 1; *\/ */
srcs/builtins/history_opt.c:/* /\* 		tmp->p = NULL; *\/ */
srcs/builtins/history_opt.c:/* /\* 		tmp->n = (*his); *\/ */
srcs/builtins/history_opt.c:/* /\* 		(*his)->p = tmp; *\/ */
srcs/builtins/history_opt.c:/* /\* 	while ((*his)->n) *\/ */
srcs/builtins/history_opt.c:/* /\* 		(*his) = (*his)->n; *\/ */
srcs/builtins/history_opt.c:/* /\* 	(*his) = (*his)->p; *\/ */
srcs/builtins/history_opt.c:/* /\* 	if (!((*his)->n = (t_his *)malloc(sizeof(t_his)))) *\/ */
srcs/builtins/history_opt.c:/* /\* 		exit(fd_printf(2, "save-hisroty: malloc error\n")); *\/ */
srcs/builtins/history_opt.c:/* /\* 	(*his)->n->cmdl = ft_strdup(line); *\/ */
srcs/builtins/history_opt.c:/* /\* 	(*his)->n->add = 1; *\/ */
srcs/builtins/history_opt.c:/* /\* 	(*his)->n->p = (*his); *\/ */
srcs/builtins/history_opt.c:/* /\* 	(*his)->n->n = tmp; *\/ */
srcs/builtins/history_opt.c:/* /\* 	(*his) = (*his)->n; *\/ */
srcs/builtins/history_opt.c:/* /\* 	(*his)->n->p = (*his); *\/ */
srcs/builtins/history_opt.c:/* /\* 	(*his) = (*his)->n; *\/ */
srcs/builtins/history_opt.c:/* /\* 	len == -50 ? count = 30 : -1; *\/ */
srcs/builtins/history_opt.c:/* /\* 	if ((fd = open(".42sh_history", O_RDONLY)) == -1) *\/ */
srcs/builtins/history_opt.c:/* /\* 		if (!(*his)->n && !(*his)->p) *\/ */
srcs/builtins/history_opt.c:/* /\* 		count != -1 ? count -= 1 : 0; *\/ */
srcs/builtins/history_opt.c:/* /\* 	while ((*his)->p) *\/ */
srcs/builtins/history_opt.c:/* /\* 		(*his) = (*his)->p; *\/ */
srcs/builtins/history_opt.c:/* /\* 	if ((fd = open(".42sh_history", O_RDWR | O_APPEND | O_CREAT, 0700)) == -1) *\/ */
srcs/builtins/history_opt.c:/* /\* 	while (tmp && fd != -1) *\/ */
srcs/builtins/history_opt.c:/* /\* 		!tmp->add ? ft_putstr_fd(tmp->cmdl, fd) : 0; *\/ */
srcs/builtins/history_opt.c:/* /\* 		tmp->add = 1; *\/ */
srcs/builtins/history_opt.c:/* /\* 		tmp = tmp->n; *\/ */
srcs/builtins/history_opt.c:/* /\* 	fd != -1 ? close(fd) : 0; *\/ */
srcs/builtins/local.c:	if (type != PIPE_SEQ && ft_strchr(tmp->left->left->str, '='))
srcs/builtins/local.c:		return (local(tmp->left->left->str));
srcs/builtins/local.c:	else if (type == PIPE_SEQ && tmp->right->left->left->left->str &&
srcs/builtins/local.c:	ft_strchr(tmp->right->left->left->left->str, '='))
srcs/builtins/local.c:		return (local(tmp->right->left->left->left->str));
srcs/builtins/local.c:	else if (type == PIPE_SEQ && tmp->right->right->left->left->str &&
srcs/builtins/local.c:	ft_strchr(tmp->right->right->left->left->str, '='))
srcs/builtins/local.c:		return (local(tmp->right->right->left->left->str));
srcs/builtins/local.c:		loc->var = NULL;
srcs/builtins/local.c:		loc->val = NULL;
srcs/builtins/local.c:		loc->n = NULL;
srcs/builtins/local.c:		if (!(loc->n = (t_local*)malloc(sizeof(t_local))))
srcs/builtins/local.c:		loc->n->var = ft_strdup(arr[0]);
srcs/builtins/local.c:		loc->n->val = ft_strdup(arr[1]);
srcs/builtins/local.c:		loc->n->n = NULL;
srcs/builtins/local.c:		loc->var = ft_strdups(arr[0], &loc->var);
srcs/builtins/local.c:		loc->val = ft_strdups(arr[1], &loc->val);
srcs/builtins/local.c:	if (!loc->var)
srcs/builtins/local.c:		loc->var = ft_strdup(arr[0]);
srcs/builtins/local.c:		loc->val = ft_strdup(arr[1]);
srcs/builtins/local.c:	while ((match = ft_strcmp(loc->var, arr[0])) && loc->n)
srcs/builtins/local.c:		loc = loc->n;
srcs/builtins/read.c:/* 	if (!var->stack) */
srcs/builtins/read.c:/* 		var->stack[0] = 0; */
srcs/builtins/read.c:/* 	if (!(var->opt & RR) && (bs = ft_strchr(var->stack, '\\'))) */
srcs/builtins/read.c:/* 	if (var->opt & AR) */
srcs/builtins/read.c:/* 		aname = ft_strsplit(var->stack, ' '); */
srcs/builtins/read.c:/* 		local(ft_strjoinf(ft_strjoin(var->local, "="), aname[0], 1)); */
srcs/builtins/read.c:/* 	var->stack = ft_strjoinf(ft_strjoin(var->local, "="), var->stack, 3); */
srcs/builtins/read.c:/* 	local(var->stack); */
srcs/builtins/read.c:/*   var->stack = ft_memalloc(512); */
srcs/builtins/read.c:/*   while (var->time ? var->time < var->endwait  : 1) */
srcs/builtins/read.c:/*     read(var->fd, buf, 1); */
srcs/builtins/read.c:/* 		var->eot = 1; */
srcs/builtins/read.c:/* 	!(var->opt & SR) ? write(1, &buf[0], 1) : 0; */
srcs/builtins/read.c:/*     var->opt & NR && PRINT ? nchar += 1 : 0; */
srcs/builtins/read.c:/*     (PRINT && !var->delim) || (PRINT && var->delim && var->delim[0] != buf[0]) */
srcs/builtins/read.c:/* 		    ? buf_save(&var->stack, buf, &i, 0) : 0; */
srcs/builtins/read.c:/*     if ((var->nchars ? var->nchars == nchar : 0) || (var->delim ? var->delim[0] */
srcs/builtins/read.c:/*                                                      == buf[0] : 0) || (!var->nchars && !var->delim && RETURN)) */
srcs/builtins/read.c:/*       var->stack[i] == '\\' && !(var->opt & RR) ? write(var->fd, "$> ", 4) : 0; */
srcs/builtins/read.c:/*       if (!(var->stack[i] == '\\' && !(var->opt & RR))) */
srcs/builtins/read.c:/*         buf_save(&var->stack, buf, &i, 1); */
srcs/builtins/read.c:/*     var->time = var->time ? time(NULL) : 0; */
srcs/builtins/read.c:/*     k = -1; */
srcs/builtins/read.c:/*       j += j == 0 && arg[(*i)][j] == '-' ? 1 : 0; */
srcs/builtins/read.c:/*       if (j == 0 && arg[(*i)][j] != '-') */
srcs/builtins/read.c:/*         var->local = ft_strdup(arg[(*i)]); */
srcs/builtins/read.c:/*       return (fd_printf(2, "42sh: read: -%c: invalid option\n%s\n", */
srcs/builtins/read.c:  /* targ = creat_arg_env(&(*ast)->left->right); */
srcs/builtins/read.c:  /* i = -1; */
srcs/builtins/read.c:  /* read_input(&var, -1, 0); */
srcs/builtins/read_opt1.c:	var->opt |= AR;
srcs/builtins/read_opt1.c:		var->local = ft_strdup(arg[(*i)] + j);
srcs/builtins/read_opt1.c:		var->local = ft_strdup(arg[++(*i)]);
srcs/builtins/read_opt1.c:		return (fd_printf(2, "42sh: read: -a: option requires an argument "
srcs/builtins/read_opt1.c:		"read: usage: read [-ers] [-u fd] [-t timeout] [-p prompt]"
srcs/builtins/read_opt1.c:		" [-a array] [-n nchars] [-d delim] [name ...]\n"));
srcs/builtins/read_opt1.c:	var->opt |= DR;
srcs/builtins/read_opt1.c:		var->delim = ft_strsub(arg[(*i)], j, 1);
srcs/builtins/read_opt1.c:		var->delim = ft_strsub(arg[++(*i)], 0, 1);
srcs/builtins/read_opt1.c:		return (fd_printf(2, "ICI42sh: read: -d: option requires an argument "
srcs/builtins/read_opt1.c:		"read: usage: read [-ers] [-u fd] [-t timeout] [-p prompt]"
srcs/builtins/read_opt1.c:		" [-a array] [-n nchars] [-d delim] [name ...]\n"));
srcs/builtins/read_opt1.c:	var->opt |= NR;
srcs/builtins/read_opt1.c:		var->nchars = ft_atoi(arg[(*i)] + j);
srcs/builtins/read_opt1.c:		var->nchars = ft_atoi(arg[++(*i)]);
srcs/builtins/read_opt1.c:		return (fd_printf(2, "42sh: read: -n: option requires an argument "
srcs/builtins/read_opt1.c:		"read: usage: read [-ers] [-u fd] [-t timeout] [-p prompt]"
srcs/builtins/read_opt1.c:		" [-a array] [-n nchars] [-d delim] [name ...]\n"));
srcs/builtins/read_opt1.c:	var->opt |= PR;
srcs/builtins/read_opt1.c:		return (fd_printf(2, "42sh: read: -n: option requires an argument "
srcs/builtins/read_opt1.c:		"read: usage: read [-ers] [-u fd] [-t timeout] [-p prompt]"
srcs/builtins/read_opt1.c:		" [-a array] [-n nchars] [-d delim] [name ...]\n"));
srcs/builtins/read_opt1.c:	var->local = ft_strdup("REPLY");
srcs/builtins/read_opt1.c:	var->opt |= RR;
srcs/builtins/read_opt1.c:	var->opt |= TR;
srcs/builtins/read_opt1.c:		return (fd_printf(2, "42sh: read: -t: option requires an argument "
srcs/builtins/read_opt1.c:		"read: usage: read [-ers] [-u fd] [-t timeout] [-p prompt]"
srcs/builtins/read_opt1.c:		" [-a array] [-n nchars] [-d delim] [name ...]\n"));
srcs/builtins/read_opt1.c:	var->time = time(NULL);
srcs/builtins/read_opt1.c:	var->endwait = var->time + seconds;
srcs/builtins/read_opt1.c:	var->opt |= UR;
srcs/builtins/read_opt1.c:		var->fd = ft_atoi(arg[(*i)] + j);
srcs/builtins/read_opt1.c:		var->fd = ft_atoi(arg[++(*i)]);
srcs/builtins/read_opt1.c:		return (fd_printf(2, "42sh: read: -u: option requires an argument "
srcs/builtins/read_opt1.c:		"read: usage: read [-ers] [-u fd] [-t timeout] [-p prompt]"
srcs/builtins/read_opt1.c:		" [-a array] [-n nchars] [-d delim] [name ...]\n"));
srcs/builtins/read_opt1.c:	var->opt |= SR;
srcs/builtins/setenv.c:		tmp->var = ft_strdup(var);
srcs/builtins/setenv.c:			tmp->value = ft_strdup(value);
srcs/builtins/setenv.c:			tmp->value = NULL;
srcs/builtins/setenv.c:	if ((*node)->value)
srcs/builtins/setenv.c:		ft_strdel(&(*node)->value);
srcs/builtins/setenv.c:	(*node)->value = str ? ft_strdup(str) : NULL;
srcs/builtins/setenv.c:		while (tmp->next)
srcs/builtins/setenv.c:			tmp = tmp->next;
srcs/builtins/setenv.c:		if (!(tmp->next = (t_env*)malloc(sizeof(t_env))))
srcs/builtins/setenv.c:		tmp = tmp->next;
srcs/builtins/setenv.c:		tmp->next = NULL;
srcs/builtins/setenv.c:	arg = creat_arg_env(&(*ast)->left->right);
srcs/builtins/unset.c:	while (tmp && ft_strcmp(tmp->var, str))
srcs/builtins/unset.c:		tmp = tmp->next;
srcs/builtins/unset.c:	free(tmp->var);
srcs/builtins/unset.c:	free(tmp->value);
srcs/builtins/unset.c:		prev->next = tmp->next;
srcs/builtins/unset.c:	else if (!prev && tmp->next)
srcs/builtins/unset.c:		*env = tmp->next;
srcs/builtins/unset.c:	else if (!prev && !tmp->next)
srcs/builtins/unset.c:	while (loc && ft_strcmp(str, loc->var))
srcs/builtins/unset.c:		loc = loc->n;
srcs/builtins/unset.c:	free(loc->var);
srcs/builtins/unset.c:	free(loc->val);
srcs/builtins/unset.c:		prev->n = loc->n;
srcs/builtins/unset.c:	else if (!prev && loc->n)
srcs/builtins/unset.c:		*local_sgt(0) = loc->n;
srcs/builtins/unset.c:	else if (!prev && !loc->n)
srcs/builtins/unset.c:	if (!(*ast)->left->right)
srcs/builtins/unset.c:	if (unset_lst((*ast)->left->right->str))
srcs/builtins/unset.c:		unset_env(env, (*ast)->left->right->str);
srcs/builtins/unsetenv.c:	ft_strdel(&node->var);
srcs/builtins/unsetenv.c:	if (node->value)
srcs/builtins/unsetenv.c:		ft_strdel(&node->value);
srcs/builtins/unsetenv.c:	prev->next = (*tmp)->next;
srcs/builtins/unsetenv.c:	*lst = tmp->next;
srcs/builtins/unsetenv.c:	while (tmp && ft_strcmp(tmp->var, var) != 0)
srcs/builtins/unsetenv.c:		tmp = tmp->next;
srcs/builtins/unsetenv.c:	else if (tmp && ft_strcmp(tmp->var, var) == 0)
srcs/builtins/unsetenv.c:		arg[j] = ft_strdup(tmp->str);
srcs/builtins/unsetenv.c:		tmp = tmp->right;
srcs/builtins/unsetenv.c:	arg = creat_arg_env(&(*ast)->right);
srcs/builtins/unsetenv.c:	arg = creat_arg_env(&(*ast)->left->right);
srcs/command_line/arrows_fucn1.c:	if (cmdl->opt & CHIS_S)
srcs/command_line/arrows_fucn1.c:	tmp = cmdl->line.co + 1;
srcs/command_line/arrows_fucn1.c:	len = ft_strlen(cmdl->line.str);
srcs/command_line/arrows_fucn1.c:	if (OPT_D(cmdl->line.buf) && cmdl->line.cur + cmdl->line.co - cmdl->line.pr
srcs/command_line/arrows_fucn1.c:	>= len && len >= cmdl->line.co)
srcs/command_line/arrows_fucn1.c:		while (cmdl->line.str[cmdl->line.cur - cmdl->line.pr])
srcs/command_line/arrows_fucn1.c:	else if (OPT_U(cmdl->line.buf) && cmdl->line.cur >= cmdl->line.co)
srcs/command_line/arrows_fucn1.c:		while (--tmp)
srcs/command_line/arrows_fucn1.c:	else if (OPT_D(cmdl->line.buf) && len >= cmdl->line.co - cmdl->line.pr)
srcs/command_line/arrows_fucn1.c:		while (--tmp)
srcs/command_line/arrows_fucn1.c:	if (cmdl->opt & CHIS_S)
srcs/command_line/arrows_fucn1.c:	if (cmdl->line.str[0])
srcs/command_line/arrows_fucn1.c:		while (cmdl->line.cur > cmdl->line.pr)
srcs/command_line/arrows_fucn1.c:	if (cmdl->opt & CHIS_S)
srcs/command_line/arrows_fucn1.c:	if (cmdl->line.str[0])
srcs/command_line/arrows_fucn1.c:		while (cmdl->line.str[cmdl->line.cur - cmdl->line.pr])
srcs/command_line/arrows_fucn1.c:	if (cmdl->opt & CHIS_S)
srcs/command_line/arrows_fucn1.c:	if (!cmdl->line.str[cmdl->line.cur - cmdl->line.pr])
srcs/command_line/arrows_fucn1.c:	cmdl->line.cur += 1;
srcs/command_line/arrows_fucn1.c:	if (cmdl->line.cur % cmdl->line.co == 0)
srcs/command_line/arrows_fucn1.c:	i = -1;
srcs/command_line/arrows_fucn1.c:	if (cmdl->opt & CHIS_S)
srcs/command_line/arrows_fucn1.c:	if (cmdl->line.cur == cmdl->line.pr)
srcs/command_line/arrows_fucn1.c:	if (cmdl->line.cur % cmdl->line.co == 0)
srcs/command_line/arrows_fucn1.c:		while (++i < cmdl->line.co)
srcs/command_line/arrows_fucn1.c:	cmdl->line.cur -= 1;
srcs/command_line/arrows_fucn2.c:	if (cmdl->opt & CHIS_S)
srcs/command_line/arrows_fucn2.c:	if (cmdl->line.str[0])
srcs/command_line/arrows_fucn2.c:		while (cmdl->line.str[cmdl->line.cur - cmdl->line.pr] != ' ' &&
srcs/command_line/arrows_fucn2.c:		cmdl->line.cur > cmdl->line.pr)
srcs/command_line/arrows_fucn2.c:		while (cmdl->line.str[cmdl->line.cur - cmdl->line.pr] == ' ' &&
srcs/command_line/arrows_fucn2.c:		cmdl->line.cur > cmdl->line.pr)
srcs/command_line/arrows_fucn2.c:	if (cmdl->opt & CHIS_S)
srcs/command_line/arrows_fucn2.c:	if (cmdl->line.str[0])
srcs/command_line/arrows_fucn2.c:		while (cmdl->line.str[cmdl->line.cur - cmdl->line.pr] != ' ' &&
srcs/command_line/arrows_fucn2.c:		cmdl->line.str[cmdl->line.cur - cmdl->line.pr] != 0)
srcs/command_line/arrows_fucn2.c:		while (cmdl->line.str[cmdl->line.cur - cmdl->line.pr] == ' ' &&
srcs/command_line/arrows_fucn2.c:		cmdl->line.str[cmdl->line.cur - cmdl->line.pr] != 0)
srcs/command_line/ccp.c:		tmp = cmdl->ccp.start;
srcs/command_line/ccp.c:		cmdl->ccp.start = cmdl->ccp.end;
srcs/command_line/ccp.c:		cmdl->ccp.end = tmp;
srcs/command_line/ccp.c:		if (cmdl->line.cur == 3)
srcs/command_line/ccp.c:		while (i--)
srcs/command_line/ccp.c:	if (CUT(cmdl->line.buf))
srcs/command_line/ccp.c:		cmdl->ccp.start != -1 && cmdl->ccp.end == -1 ?
srcs/command_line/ccp.c:		cmdl->ccp.end = cmdl->line.cur - cmdl->line.pr : 0;
srcs/command_line/ccp.c:		cmdl->ccp.start == -1 && cmdl->ccp.end == -1 ?
srcs/command_line/ccp.c:		cmdl->ccp.start = cmdl->line.cur - cmdl->line.pr : 0;
srcs/command_line/ccp.c:	else if (CPY(cmdl->line.buf))
srcs/command_line/ccp.c:		cmdl->ccp.start != -1 && cmdl->ccp.end == -1 ?
srcs/command_line/ccp.c:		cmdl->ccp.end = cmdl->line.cur - cmdl->line.pr : 0;
srcs/command_line/ccp.c:		cmdl->ccp.start == -1 && cmdl->ccp.end == -1 ?
srcs/command_line/ccp.c:		cmdl->ccp.start = cmdl->line.cur - cmdl->line.pr : 0;
srcs/command_line/ccp.c:	if (cmdl->ccp.end == -1)
srcs/command_line/ccp.c:	if (cmdl->ccp.start > cmdl->ccp.end)
srcs/command_line/ccp.c:	i = cmdl->ccp.end - cmdl->ccp.start;
srcs/command_line/ccp.c:	if (cmdl->ccp.cpy)
srcs/command_line/ccp.c:		ft_strdel(&cmdl->ccp.cpy);
srcs/command_line/ccp.c:	cmdl->ccp.cpy = ft_strsub(cmdl->line.str, cmdl->ccp.start, i);
srcs/command_line/ccp.c:	if (CUT(cmdl->line.buf))
srcs/command_line/ccp.c:	if (cmdl->opt & CHIS_S)
srcs/command_line/ccp.c:	if (PST(cmdl->line.buf) && cmdl->ccp.cpy)
srcs/command_line/ccp.c:		(paste(cmdl, ft_strlen(cmdl->ccp.cpy), ft_strlen(cmdl->line.str)));
srcs/command_line/ccp.c:	if (PST(cmdl->line.buf) && cmdl->ccp.end == -1)
srcs/command_line/ccp.c:	if ((CUT(cmdl->line.buf) && cmdl->ccp.ccp == 2)
srcs/command_line/ccp.c:	|| (CPY(cmdl->line.buf) && cmdl->ccp.ccp == 1))
srcs/command_line/ccp.c:		cmdl->ccp.start = -1;
srcs/command_line/ccp.c:		cmdl->ccp.end = -1;
srcs/command_line/ccp.c:	cmdl->ccp.ccp = CUT(cmdl->line.buf) ? 1 : 2;
srcs/command_line/ccp_paste.c:	j = -1;
srcs/command_line/ccp_paste.c:	if (len_str + len_cpy >= cmdl->line.len)
srcs/command_line/ccp_paste.c:		remalloc_cmdl(&cmdl->line, len_str);
srcs/command_line/ccp_paste.c:	if (cmdl->line.str[cmdl->line.cur - cmdl->line.pr] == 0)
srcs/command_line/ccp_paste.c:		cmdl->line.str = ft_strcat(cmdl->line.str, cmdl->ccp.cpy);
srcs/command_line/ccp_paste.c:		cmdl->line.cur += len_cpy;
srcs/command_line/ccp_paste.c:		tmp = ft_strdup(cmdl->line.str + (cmdl->line.cur - cmdl->line.pr));
srcs/command_line/ccp_paste.c:		while (cmdl->ccp.cpy[++i])
srcs/command_line/ccp_paste.c:			cmdl->line.str[cmdl->line.cur++ - cmdl->line.pr] = cmdl->ccp.cpy[i];
srcs/command_line/ccp_paste.c:		i = cmdl->line.cur - cmdl->line.pr;
srcs/command_line/ccp_paste.c:			cmdl->line.str[cmdl->line.cur++ - cmdl->line.pr] = tmp[j];
srcs/command_line/ccp_paste.c:		write(1, cmdl->line.str + i, ft_strlen(cmdl->line.str + i));
srcs/command_line/ccp_paste.c:		cmdl->line.cur -= (cmdl->line.cur - cmdl->line.pr) - i;
srcs/command_line/ccp_paste.c:	if ((int)ft_strlen(cmdl->line.str) + cmdl->line.pr + len_cpy >=
srcs/command_line/ccp_paste.c:	cmdl->line.co * cmdl->line.li - (cmdl->line.co - 1))
srcs/command_line/ccp_paste.c:	write(1, cmdl->ccp.cpy, len_cpy);
srcs/command_line/ccp_paste.c:	edit_cmdl(cmdl, len_cpy, len_str, -1);
srcs/command_line/ccp_paste.c:	if (cmdl->line.cur % cmdl->line.co == 0)
srcs/command_line/ccp_paste.c:	cmdl->ccp.start = -1;
srcs/command_line/ccp_paste.c:	cmdl->ccp.end = -1;
srcs/command_line/ccp_paste.c:	cmdl->ccp.ccp = 0;
srcs/command_line/check_env.c:/* 	k = ft_tablen(env) - 1; */
srcs/command_line/check_env.c:/* 		newenv[++k] = ft_strdup("TERM=xterm-256color"); */
srcs/command_line/check_env.c:/* 	i = -1; */
srcs/command_line/check_env.c:/* 	while (env[++i] && (k = -1)) */
srcs/command_line/cmdl_signals.c:		ft_putstr(cmdl->line.str);
srcs/command_line/cmdl_signals.c:		while (cmdl->line.cur > cmdl->line.pr)
srcs/command_line/cmdl_signals.c:			cmdl->line.cur--;
srcs/command_line/cmdl_signals.c:		cmd_save_history(cmdl->line.str);
srcs/command_line/cmdl_signals.c:		ft_memset(cmdl->line.str, 0, ft_strlen(cmdl->line.str));
srcs/command_line/cmdl_signals.c:		cmdl->opt = 0;
srcs/command_line/cmdl_signals.c:	if (sigaction(SIGWINCH, &sig, NULL) == -1 ||
srcs/command_line/cmdl_signals.c:		sigaction(SIGINT, &sig, NULL) == -1 ||
srcs/command_line/cmdl_signals.c:		sigaction(SIGQUIT, &sig, NULL) == -1)
srcs/command_line/completion.c:	i = -1;
srcs/command_line/completion.c:	if (cmdl->opt & CSQ || cmdl->opt & CDQ)
srcs/command_line/completion.c:			if (ft_strncmp(rdd->d_name, tmp, ft_strlen(tmp)) == 0 &&
srcs/command_line/completion.c:			!check_comp(&comp, rdd->d_name))
srcs/command_line/completion.c:		if (!(*tmp) || (ft_strncmp(rdd->d_name, (*tmp), ft_strlen(*tmp)) == 0
srcs/command_line/completion.c:		&& ft_strcmp(rdd->d_name, ".") && ft_strcmp(rdd->d_name, "..")))
srcs/command_line/completion.c:			if (rdd->d_name[0] != '.' || ft_strlen((*tmp)))
srcs/command_line/completion.c:	path = ft_strsplit(lst_at(&cmdl->lstenv, "PATH")->value, ':');
srcs/command_line/completion.c:	while (--i > 0 && cmdl->line.str[i] != ' ' && cmdl->line.str[i] != '|' &&
srcs/command_line/completion.c:			cmdl->line.str[i] != ';' && cmdl->line.str[i] != '&' &&
srcs/command_line/completion.c:			cmdl->line.str[i] != '<' && cmdl->line.str[i] != '>')
srcs/command_line/completion.c:	while (cmdl->line.str[cmdl->line.cur - cmdl->line.pr] && sep(cmdl, 0))
srcs/command_line/completion.c:	if (cmdl->line.str[cmdl->line.cur - cmdl->line.pr - 1] != ' ')
srcs/command_line/completion.c:		tmp = ft_strsub(cmdl->line.str, (i ? i + 1 : i),
srcs/command_line/completion.c:		cmdl->line.cur - cmdl->line.pr - i - (i ? 1 : 0));
srcs/command_line/completion.c:	i = -1;
srcs/command_line/completion.c:	i = cmdl->line.cur - cmdl->line.pr;
srcs/command_line/completion.c:	if (cmdl->opt & CHIS_S)
srcs/command_line/completion.c:	if (!(cmdl->opt & CSQ) && !(cmdl->opt & CDQ) && !(cmdl->opt & CPIPE) &&
srcs/command_line/completion.c:		!(cmdl->opt & CAND) && !(cmdl->opt & COR) &&
srcs/command_line/completion.c:		(!cmdl->lstenv || !lst_at(&cmdl->lstenv, "PATH") ||
srcs/command_line/completion.c:		only_space(cmdl->line.str)))
srcs/command_line/completion.c:	if (i - 1 < 0 || cmdl->line.str[i - 1] != '|' ||
srcs/command_line/completion.c:	cmdl->line.str[i - 1] != ';' || cmdl->line.str[i - 1] != '&' ||
srcs/command_line/completion.c:	cmdl->line.str[i - 1] != '<' || cmdl->line.str[i - 1] != '>')
srcs/command_line/completion.c:		get_comp(cmdl, cmdl->line.cur - cmdl->line.pr);
srcs/command_line/completion_display.c:		save = tmp->n;
srcs/command_line/completion_display.c:		free(tmp->str);
srcs/command_line/completion_display.c:		save = ft_strlen(tmp->str);
srcs/command_line/completion_display.c:		tmp = tmp->n;
srcs/command_line/completion_display.c:		save = ft_strlen(tmp->str);
srcs/command_line/completion_display.c:		ft_memset(tmp->pad, ' ', (*len) - save);
srcs/command_line/completion_display.c:		tmp = tmp->n;
srcs/command_line/completion_display.c:	winsize = cmdl->line.co - len - 5;
srcs/command_line/completion_display.c:		len += ft_printf("%s", tmp->str);
srcs/command_line/completion_display.c:		if ((len + ft_strlen(tmp->pad)) < winsize)
srcs/command_line/completion_display.c:			len += ft_printf("%s", tmp->pad);
srcs/command_line/completion_display.c:			tmp->n ? ft_printf("%n\n", &len) : 0;
srcs/command_line/completion_display.c:		tmp = tmp->n;
srcs/command_line/completion_display.c:	if (cmdl->line.pr == 3)
srcs/command_line/completion_display.c:	else if (cmdl->opt & CSQ || cmdl->opt & CDQ)
srcs/command_line/completion_display.c:		write(1, cmdl->opt & CSQ ? "quote> " : "dquote> ",
srcs/command_line/completion_display.c:		cmdl->opt & CSQ ? 7 : 8);
srcs/command_line/completion_display.c:	write(1, cmdl->line.str, ft_strlen(cmdl->line.str));
srcs/command_line/completion_display.c:	if (!(*comp)->n && (int)ft_strlen(cmdl->line.str) +
srcs/command_line/completion_display.c:		offset >= cmdl->line.len)
srcs/command_line/completion_display.c:		remalloc_cmdl(&cmdl->line, ft_strlen(cmdl->line.str));
srcs/command_line/completion_display.c:	if ((*comp) && (*comp)->n)
srcs/command_line/completion_display.c:		pos = cmdl->line.cur;
srcs/command_line/completion_display.c:		!(cmdl->line.cur % cmdl->line.co) ?
srcs/command_line/completion_display.c:		while (cmdl->line.cur > pos)
srcs/command_line/completion_display.c:		completion_edit(&cmdl->line, comp, NULL, offset);
srcs/command_line/completion_display.c:		!(cmdl->line.cur % cmdl->line.co) ?
srcs/command_line/completion_display.c:		if (!ft_strcmp(name, tmp->str))
srcs/command_line/completion_display.c:		tmp = tmp->n;
srcs/command_line/completion_edit.c:	tmp = line->str[line->cur - line->pr] ?
srcs/command_line/completion_edit.c:	ft_strdup(line->str + (line->cur - line->pr)) : NULL;
srcs/command_line/completion_edit.c:		line->str = ft_strcat(line->str, (*comp)->str + offset);
srcs/command_line/completion_edit.c:		write(1, line->str + (line->cur - line->pr),
srcs/command_line/completion_edit.c:		ft_strlen(line->str + (line->cur - line->pr)));
srcs/command_line/completion_edit.c:		line->cur = ft_strlen(line->str) + line->pr;
srcs/command_line/completion_edit.c:		ft_memset(line->str + (line->cur - line->pr), 0,
srcs/command_line/completion_edit.c:		ft_strlen(line->str + (line->cur - line->pr)));
srcs/command_line/completion_edit.c:		line->str = ft_strcat(line->str, (*comp)->str + offset);
srcs/command_line/completion_edit.c:		write(1, line->str + (line->cur - line->pr),
srcs/command_line/completion_edit.c:		ft_strlen(line->str + (line->cur - line->pr)));
srcs/command_line/completion_edit.c:		line->cur = ft_strlen(line->str) + line->pr;
srcs/command_line/completion_edit.c:		line->str = ft_strcat(line->str, tmp);
srcs/command_line/completion_edit.c:		write(1, line->str + (line->cur - line->pr),
srcs/command_line/completion_edit.c:		ft_strlen(line->str + (line->cur - line->pr)));
srcs/command_line/completion_func.c:		lnk->n = tmp;
srcs/command_line/completion_func.c:		while (i-- > 1)
srcs/command_line/completion_func.c:			tmp = tmp->n;
srcs/command_line/completion_func.c:		save = tmp->n;
srcs/command_line/completion_func.c:		tmp->n = lnk;
srcs/command_line/completion_func.c:		lnk->n = save;
srcs/command_line/completion_func.c:	tmp->str = (param == 2 && rdd->d_type == 4 ?
srcs/command_line/completion_func.c:	ft_strjoin(rdd->d_name, "/") : ft_strdup(rdd->d_name));
srcs/command_line/completion_func.c:	ft_memset(tmp->pad, 0, 512);
srcs/command_line/completion_func.c:	tmp->n = NULL;
srcs/command_line/completion_func.c:	while (stock && ft_strcmp(stock->str, rdd->d_name) < 0)
srcs/command_line/completion_func.c:		stock = stock->n;
srcs/command_line/completion_func.c:	pos = cmdl->line.cur - cmdl->line.pr;
srcs/command_line/completion_func.c:	while (--pos && cmdl->line.str[pos] == ' ')
srcs/command_line/completion_func.c:	while (pos && ft_isalnum(cmdl->line.str[pos]))
srcs/command_line/completion_func.c:		pos--;
srcs/command_line/completion_func.c:	while (pos && cmdl->line.str[pos] == ' ')
srcs/command_line/completion_func.c:		pos--;
srcs/command_line/completion_func.c:	if (cmdl->line.str[pos] == ';' || pos == 0 || cmdl->line.str[pos] == '|' ||
srcs/command_line/completion_func.c:	(cmdl->line.str[pos] == '&' && pos > 0 && cmdl->line.str[pos - 1] == '&'))
srcs/command_line/completion_func.c:	i = -1;
srcs/command_line/completion_func.c:		if (cmdl->line.str[cmdl->line.cur - cmdl->line.pr] != '|' &&
srcs/command_line/completion_func.c:		cmdl->line.str[cmdl->line.cur - cmdl->line.pr] != ';' &&
srcs/command_line/completion_func.c:		cmdl->line.str[cmdl->line.cur - cmdl->line.pr] != '&' &&
srcs/command_line/completion_func.c:		cmdl->line.str[cmdl->line.cur - cmdl->line.pr] != '<' &&
srcs/command_line/completion_func.c:		cmdl->line.str[cmdl->line.cur - cmdl->line.pr] != '>' &&
srcs/command_line/completion_func.c:		cmdl->line.str[cmdl->line.cur - cmdl->line.pr] != ' ')
srcs/command_line/ctrl.c:	cmdl->line.str = ft_strjoinf(cmdl->line.save, cmdl->line.str, 0);
srcs/command_line/ctrl.c:	cmd_save_history(cmdl->line.str);
srcs/command_line/ctrl.c:	if (cmdl->line.str && !cmdl->line.str[0] &&
srcs/command_line/ctrl.c:	((cmdl->opt & (CPIPE | CAND | COR))))
srcs/command_line/ctrl.c:	else if (cmdl->line.str && !cmdl->line.str[0] &&
srcs/command_line/ctrl.c:	(cmdl->opt & CSQ || cmdl->opt & CDQ))
srcs/command_line/ctrl.c:		cmdl->opt & CSQ ? '\'' : '"'));
srcs/command_line/ctrl.c:	else if (cmdl->line.str && cmdl->line.str[0])
srcs/command_line/ctrl.c:	if (cmdl->line.save && !cmdl->line.str[0])
srcs/command_line/ctrl.c:		ft_strdel(&cmdl->line.save);
srcs/command_line/ctrl.c:	if (cmdl->line.str && !cmdl->line.str[0])
srcs/command_line/ctrl.c:		ft_strdel(&cmdl->line.str);
srcs/command_line/ctrl.c:		cmdl->opt |= CCTRLD;
srcs/command_line/ctrl.c:	if (cmdl->opt & CHIS_S)
srcs/command_line/ctrl.c:		ft_memset(cmdl->line.str, 0, ft_strlen(cmdl->line.str));
srcs/command_line/ctrl.c:		ft_strcpy(cmdl->line.str,
srcs/command_line/ctrl.c:		findcmdl(cmdl->line.str, cmdl->line.buf, 2)->cmdl);
srcs/command_line/ctrl.c:		write(1, cmdl->line.str, ft_strlen(cmdl->line.str));
srcs/command_line/ctrl.c:		cmdl->opt &= ~(CHIS_S);
srcs/command_line/ctrl.c:		cmdl->line.cur = ft_strlen(cmdl->line.str) + cmdl->line.pr;
srcs/command_line/ctrl.c:	else if (cmdl->line.str[0])
srcs/command_line/ctrl.c:		write(1, cmdl->line.str, ft_strlen(cmdl->line.str));
srcs/command_line/del_all.c:	cmdl->line.str ? ft_strdel(&cmdl->line.str) : 0;
srcs/command_line/del_all.c:	cmdl->line.save ? ft_strdel(&cmdl->line.save) : 0;
srcs/command_line/del_all.c:	cmdl->ccp.cpy ? ft_strdel(&cmdl->ccp.cpy) : 0;
srcs/command_line/del_all.c:		save = his->n;
srcs/command_line/del_all.c:		ft_strcmp(his->cmdl, "") ? free(his->cmdl) : 0;
srcs/command_line/delete.c:	if ((cmdl->line.cur - cmdl->line.pr) == 0)
srcs/command_line/delete.c:	match = findcmdl(cmdl->line.str, cmdl->line.buf, 2);
srcs/command_line/delete.c:	len = ft_strlen(match->cmdl) + 4;
srcs/command_line/delete.c:	cmdl->line.cur -= 1;
srcs/command_line/delete.c:	cmdl->line.str[cmdl->line.cur - cmdl->line.pr] = 0;
srcs/command_line/delete.c:	(cmdl->line.cur - cmdl->line.pr) == 0 ?
srcs/command_line/delete.c:	write(1, "':", 2) : ft_printf("': %@", match->cmdl);
srcs/command_line/delete.c:	if (cmdl->opt & CHIS_S)
srcs/command_line/delete.c:	if (cmdl->line.cur == cmdl->line.pr)
srcs/command_line/delete.c:	cmdl->ccp.start -= cmdl->ccp.start == -1 ? 0 : 1;
srcs/command_line/delete.c:	i = cmdl->line.cur - cmdl->line.pr - 1;
srcs/command_line/delete.c:	while (cmdl->line.str[++i])
srcs/command_line/delete.c:		cmdl->line.str[i] = cmdl->line.str[i + 1];
srcs/command_line/delete.c:	write(1, cmdl->line.str + (cmdl->line.cur - cmdl->line.pr),
srcs/command_line/delete.c:	ft_strlen(cmdl->line.str + (cmdl->line.cur - cmdl->line.pr)));
srcs/command_line/get_cmdl.c:	if (cmdl->line.save)
srcs/command_line/get_cmdl.c:		s1 = cmdl->line.str;
srcs/command_line/get_cmdl.c:		cmdl->line.str = ft_strtrimf(ft_strjoin(cmdl->line.save,
srcs/command_line/get_cmdl.c:		cmdl->line.str));
srcs/command_line/get_cmdl.c:		ft_strdel(&cmdl->line.save);
srcs/command_line/get_cmdl.c:	cmd_save_history(cmdl->line.str);
srcs/command_line/get_cmdl.c:	cmdl->opt |= CRESET;
srcs/command_line/get_cmdl.c:	if (cmdl->line.str)
srcs/command_line/get_cmdl.c:	if (cmdl->opt & CCTRLD)
srcs/command_line/get_cmdl.c:	static const	t_op		op[20] = {{{-61, -89, 0, 0}, &ccp},
srcs/command_line/get_cmdl.c:	{{-30, -120, -102, 0}, &ccp}, {{-30, -119, -120, 0}, &ccp},
srcs/command_line/get_cmdl.c:	*i = -1;
srcs/command_line/get_cmdl.c:	ft_memset(cmdl->line.buf, '\0', 6);
srcs/command_line/get_cmdl.c:	read(0, cmdl->line.buf, 6);
srcs/command_line/get_cmdl.c:		if (cmdl->line.buf[0] == op[(*i)].key[0] &&
srcs/command_line/get_cmdl.c:		cmdl->line.buf[1] == op[(*i)].key[1]
srcs/command_line/get_cmdl.c:		&& cmdl->line.buf[2] == op[(*i)].key[2] &&
srcs/command_line/get_cmdl.c:		cmdl->line.buf[3] == op[(*i)].key[3]
srcs/command_line/get_cmdl.c:		&& cmdl->line.buf[4] == op[(*i)].key[4])
srcs/command_line/get_cmdl.c:		i = -1;
srcs/command_line/get_cmdl.c:		else if (CTRL_L(cmdl->line.buf))
srcs/command_line/get_cmdl.c:		else if (CTRL_D(cmdl->line.buf))
srcs/command_line/get_cmdl.c:			print(cmdl, cmdl->line.buf);
srcs/command_line/history.c:	new->cmdl = ft_strdup(str);
srcs/command_line/history.c:	if (!head->n)
srcs/command_line/history.c:		head->n = new;
srcs/command_line/history.c:		new->n = NULL;
srcs/command_line/history.c:		new->p = head;
srcs/command_line/history.c:	new->n = head->n;
srcs/command_line/history.c:	head->n->p = new;
srcs/command_line/history.c:	new->p = head;
srcs/command_line/history.c:	head->n = new;
srcs/command_line/history.c:	pos = cmdl->line.cur - cmdl->line.pr;
srcs/command_line/history.c:	while (pos--)
srcs/command_line/history.c:	while ((int)ft_strlen(his->cmdl) > cmdl->line.len)
srcs/command_line/history.c:		remalloc_cmdl(&cmdl->line, ft_strlen(cmdl->line.str));
srcs/command_line/history.c:	cmdl->line.str = ft_strcpy(cmdl->line.str, his->cmdl);
srcs/command_line/history.c:	write(1, cmdl->line.str, ft_strlen(cmdl->line.str));
srcs/command_line/history.c:	cmdl->line.cur = ft_strlen(his->cmdl) + cmdl->line.pr;
srcs/command_line/history.c:	if (cmdl->opt & CHIS_S)
srcs/command_line/history.c:	if (cmdl->opt & CRESET)
srcs/command_line/history.c:	if (UP(cmdl->line.buf) && his->n)
srcs/command_line/history.c:		his = his->n;
srcs/command_line/history.c:	else if (DOWN(cmdl->line.buf) && his->p)
srcs/command_line/history.c:		his = his->p;
srcs/command_line/inhibiteur.c:	while (cmdl->line.str[len] == '\\' && len > 0)
srcs/command_line/inhibiteur.c:		len -= 1;
srcs/command_line/inhibiteur.c:		cmdl->line.cur = 3;
srcs/command_line/inhibiteur.c:		cmdl->line.pr = 3;
srcs/command_line/pipe_and_or.c:	if (cmdl->opt & CPIPE)
srcs/command_line/pipe_and_or.c:		cmdl->line.pr = 7;
srcs/command_line/pipe_and_or.c:		cmdl->line.cur = 7;
srcs/command_line/pipe_and_or.c:	else if (cmdl->opt & CAND)
srcs/command_line/pipe_and_or.c:		cmdl->line.pr = 9;
srcs/command_line/pipe_and_or.c:		cmdl->line.cur = 9;
srcs/command_line/pipe_and_or.c:		cmdl->line.pr = 9;
srcs/command_line/pipe_and_or.c:		cmdl->line.cur = 9;
srcs/command_line/pipe_and_or.c:	while (str[--i] == '\\')
srcs/command_line/pipe_and_or.c:	ft_printf("\n%s\n", cmdl->line.str + k);
srcs/command_line/pipe_and_or.c:	if (ft_strstr(cmdl->line.str + k, "||"))
srcs/command_line/pipe_and_or.c:		cmdl->opt |= COR;
srcs/command_line/pipe_and_or.c:	else if (ft_strstr(cmdl->line.str + k, "|"))
srcs/command_line/pipe_and_or.c:		cmdl->opt |= CPIPE;
srcs/command_line/pipe_and_or.c:	else if (ft_strstr(cmdl->line.str + k, "&&"))
srcs/command_line/pipe_and_or.c:		cmdl->opt |= CAND;
srcs/command_line/pipe_and_or.c:	i = -1;
srcs/command_line/pipe_and_or.c:	i = -1;
srcs/command_line/pipe_and_or.c:	if (cmdl->opt & CCTRLD)
srcs/command_line/pipe_and_or.c:	if ((cmdl->opt & (CPIPE | CAND | COR)) && only_space(cmdl->line.str))
srcs/command_line/pipe_and_or.c:	while (cmdl->line.str[++i])
srcs/command_line/pipe_and_or.c:		if ((cmdl->line.str[i] == '|' || cmdl->line.str[i] == '&') &&
srcs/command_line/pipe_and_or.c:		(only_space(cmdl->line.str + i +
srcs/command_line/pipe_and_or.c:		(cmdl->line.str[i + 1] == cmdl->line.str[i] ? 2 : 1))))
srcs/command_line/pipe_and_or.c:	if (!cmdl->line.str[i])
srcs/command_line/pipe_and_or.c:	c = cmdl->line.str[i];
srcs/command_line/pipe_and_or.c:	if (cmdl->line.str[i - 1] == '\\' && (k = bs(cmdl->line.str, i)) &&
srcs/command_line/pipe_and_or.c:	cmdl->line.str[i + 1] != c)
srcs/command_line/pipe_and_or.c:	i += k && cmdl->line.str[i - 1] == '\\' ? 1 : 0;
srcs/command_line/pipe_and_or.c:	i += cmdl->line.str[i + 1] == c ? 1 : 0;
srcs/command_line/pipe_and_or.c:	while (cmdl->line.str[++i] && (cmdl->line.str[i] == ' ' ||
srcs/command_line/pipe_and_or.c:	cmdl->line.str[i] == '\\'))
srcs/command_line/pipe_and_or.c:	if ((cmdl->line.str[i] == 0 || cmdl->line.str[i] == '\\') && check(k, cmdl))
srcs/command_line/pipe_and_or.c:	return ((cmdl->opt &= ~(CPIPE | CAND | COR)));
srcs/command_line/print.c:	tmp = line->str;
srcs/command_line/print.c:	if (!(line->str = (char *)malloc(sizeof(char) * (len + 1024))))
srcs/command_line/print.c:	ft_memset(line->str, 0, (len + 1024));
srcs/command_line/print.c:	line->str = ft_strcpy(line->str, tmp);
srcs/command_line/print.c:	line->len += 1024;
srcs/command_line/print.c:	len = ft_strlen(line->str);
srcs/command_line/print.c:	if (len + line->pr >= line->co * line->li - (line->co + 1))
srcs/command_line/print.c:		return (-1);
srcs/command_line/print.c:	len == line->len ? remalloc_cmdl(line, len) : 0;
srcs/command_line/print.c:	if (line->str[i] == 0)
srcs/command_line/print.c:		line->str = ft_strcat(line->str, buf);
srcs/command_line/print.c:		while (j-- > i)
srcs/command_line/print.c:			line->str[j + 1] = line->str[j];
srcs/command_line/print.c:		line->str[i] = buf[0];
srcs/command_line/print.c:	write(1, line->str + i, ft_strlen(line->str + i));
srcs/command_line/print.c:	line->cur += ft_strlen(line->str + i);
srcs/command_line/print.c:	!(line->cur % line->co) ? tputs(tgetstr("do", NULL), 1, ft_putchar) : 0;
srcs/command_line/print.c:	i += (len = (int)ft_strlen(line->str) - len) > 1 ? len : 0;
srcs/command_line/print.c:	if (PRINT(buf) && !(cmdl->opt & CHIS_S))
srcs/command_line/print.c:		i = regular_print(&cmdl->line, buf, cmdl->line.cur - cmdl->line.pr);
srcs/command_line/print.c:			cmdl->ccp.start += cmdl->ccp.start == -1 ? 0 : 1;
srcs/command_line/print.c:			while (cmdl->line.cur - cmdl->line.pr - 1 > i)
srcs/command_line/quotes.c:	i = -1;
srcs/command_line/quotes.c:	while (cmdl->line.str[++i])
srcs/command_line/quotes.c:		if (cmdl->line.str[i] == '\'' && (!(cmdl->opt & (CSQ | CDQ))))
srcs/command_line/quotes.c:			cmdl->opt |= CSQ;
srcs/command_line/quotes.c:		else if (cmdl->line.str[i] == '"' && (!(cmdl->opt & (CSQ | CDQ))))
srcs/command_line/quotes.c:			cmdl->opt |= (i == 0 || cmdl->line.str[i - 1] != '\\' ? CDQ :
srcs/command_line/quotes.c:			cmdl->opt);
srcs/command_line/quotes.c:		else if (cmdl->line.str[i] == '\'' && (cmdl->opt & CSQ))
srcs/command_line/quotes.c:			cmdl->opt &= ~(CSQ);
srcs/command_line/quotes.c:		else if (cmdl->line.str[i] == '"' && (cmdl->opt & CDQ))
srcs/command_line/quotes.c:			if (i == 0 || cmdl->line.str[i - 1] != '\\')
srcs/command_line/quotes.c:				cmdl->opt &= ~(CDQ);
srcs/command_line/quotes.c:	if ((cmdl->opt & (CSQ | CDQ)))
srcs/command_line/quotes.c:		cmdl->opt & CSQ ? write(1, "\nquote> ", 8) : write(1, "\ndquote> ", 9);
srcs/command_line/quotes.c:		cmdl->line.cur = cmdl->opt & CSQ ? 8 : 9;
srcs/command_line/quotes.c:		cmdl->line.pr = cmdl->opt & CSQ ? 8 : 9;
srcs/command_line/return.c:	str = findcmdl(cmdl->line.str, cmdl->line.buf, 0)->cmdl;
srcs/command_line/return.c:	while (cmdl->line.cur)
srcs/command_line/return.c:		cmdl->line.cur--;
srcs/command_line/return.c:	ft_memset(cmdl->line.str, 0, ft_strlen(cmdl->line.str));
srcs/command_line/return.c:	cmdl->line.str = ft_strcpy(cmdl->line.str, str);
srcs/command_line/return.c:	write(1, cmdl->line.str, ft_strlen(cmdl->line.str));
srcs/command_line/return.c:	cmdl->line.cur = ft_strlen(cmdl->line.str) + 3;
srcs/command_line/return.c:	cmdl->line.pr = 3;
srcs/command_line/return.c:	cmdl->opt &= ~(CHIS_S);
srcs/command_line/return.c:	return (RETURN(cmdl->line.buf) ? 1 : 2);
srcs/command_line/return.c:	if ((*cmdl)->line.str && (*cmdl)->line.str[0])
srcs/command_line/return.c:		(*cmdl)->line.save = ft_strjoinf((*cmdl)->line.save,
srcs/command_line/return.c:		(*cmdl)->line.str, 1);
srcs/command_line/return.c:	ft_memset((*cmdl)->line.str, 0, ft_strlen((*cmdl)->line.str));
srcs/command_line/return.c:	if (!(cmdl->opt & CHIS_S)
srcs/command_line/return.c:	&& !(cmdl->opt & (CPIPE | CAND | COR)) && check_quote(cmdl))
srcs/command_line/return.c:	else if (!(cmdl->opt & (CSQ | CDQ)) && !(cmdl->opt & CHIS_S) &&
srcs/command_line/return.c:	else if (cmdl->line.str && !(cmdl->opt & CSQ) && !(cmdl->opt & CDQ)
srcs/command_line/return.c:	&& !(cmdl->opt & CHIS_S)
srcs/command_line/return.c:	&& !(cmdl->opt & (CPIPE | CAND | COR)) && cmdl->line.str[len] == '\\'
srcs/command_line/return.c:	if (!(cmdl->opt & CHIS_S))
srcs/command_line/return.c:		if (check_cmdl(cmdl, ft_strlen(cmdl->line.str) - 1))
srcs/command_line/search_history.c:		head = NEXT(buf) ? match->p : match->n;
srcs/command_line/search_history.c:		if (!head->n && !head->p)
srcs/command_line/search_history.c:		head = head->n;
srcs/command_line/search_history.c:		if (ft_strstr(head->cmdl, str))
srcs/command_line/search_history.c:			head = NEXT(buf) ? (head->p) : (head->n);
srcs/command_line/search_history.c:		ft_printf("%c': %@", buf[0], his->cmdl);
srcs/command_line/search_history.c:		ft_printf("': %@", his->cmdl);
srcs/command_line/search_history.c:		(cmdl->line.cur) += 1;
srcs/command_line/search_history.c:	pos = cmdl->line.cur - cmdl->line.pr;
srcs/command_line/search_history.c:	len = ft_strlen(cmdl->line.str);
srcs/command_line/search_history.c:		len == cmdl->line.len ? remalloc_cmdl(&cmdl->line, len) : 0;
srcs/command_line/search_history.c:		cmdl->line.str = ft_strcat(cmdl->line.str, buf);
srcs/command_line/search_history.c:	if ((his = findcmdl(cmdl->line.str, buf, 0)))
srcs/command_line/search_history.c:		cmdl->line.str[len] = 0;
srcs/command_line/search_history.c:	if (cmdl->opt & CHIS_S)
srcs/command_line/search_history.c:		return (search_history_print(cmdl, cmdl->line.buf));
srcs/command_line/search_history.c:	len = cmdl->line.str ? ft_strlen(cmdl->line.str) : 1;
srcs/command_line/search_history.c:	if (cmdl->line.str)
srcs/command_line/search_history.c:		ft_memset(cmdl->line.str, 0, ft_strlen(cmdl->line.str));
srcs/command_line/search_history.c:	ft_putstr("(reverse-i-search)`");
srcs/command_line/search_history.c:	cmdl->line.cur = 19;
srcs/command_line/search_history.c:	cmdl->line.pr = 19;
srcs/command_line/search_history.c:	cmdl->opt |= CHIS_S;
srcs/command_line/set_shell.c:	if (ioctl(0, TIOCGWINSZ, &w) == -1)
srcs/command_line/set_shell.c:	cmdl->line.co = w.ws_col;
srcs/command_line/set_shell.c:	cmdl->line.li = w.ws_row;
srcs/command_line/set_shell.c:	cmdl->term.c_lflag |= ICANON;
srcs/command_line/set_shell.c:	cmdl->term.c_lflag |= ECHO;
srcs/command_line/set_shell.c:	if (tcsetattr(1, TCSADRAIN, &cmdl->term) == -1)
srcs/command_line/set_shell.c:	cmdl->term.c_lflag &= ~(ICANON);
srcs/command_line/set_shell.c:	cmdl->term.c_lflag &= ~(ECHO);
srcs/command_line/set_shell.c:	cmdl->term.c_cc[VMIN] = 1;
srcs/command_line/set_shell.c:	cmdl->term.c_cc[VTIME] = 0;
srcs/command_line/set_shell.c:		kill(-g_shell_pgid, SIGTTIN);
srcs/command_line/set_shell.c:	if (tcsetattr(1, TCSADRAIN, &cmdl->term) == -1)
srcs/command_line/set_shell.c:		return (fd_printf(2, "set-shell: tcsetattr: ERROR\n"));
srcs/command_line/set_shell.c:			kill(-g_shell_pgid, SIGTTIN);
srcs/command_line/set_shell.c:		shl_name = "xterm-256color";
srcs/command_line/set_shell.c:	if (tcgetattr(1, &cmdl->term) == -1)
srcs/command_line/slg.c:		his->cmdl = "";
srcs/command_line/slg.c:		his->n = NULL;
srcs/command_line/slg.c:		his->p = NULL;
srcs/command_line/slg.c:	cmdl->opt = 0;
srcs/command_line/slg.c:	cmdl->exit = 0;
srcs/command_line/slg.c:	cmdl->prompt = NULL;
srcs/command_line/slg.c:	cmdl->line.str ? ft_strdel(&cmdl->line.str) : 0;
srcs/command_line/slg.c:	cmdl->line.str = ft_memalloc(1024);
srcs/command_line/slg.c:	cmdl->line.save ? ft_strdel(&cmdl->line.save) : 0;
srcs/command_line/slg.c:	cmdl->line.save = NULL;
srcs/command_line/slg.c:	cmdl->ccp.cpy ? ft_strdel(&cmdl->ccp.cpy) : 0;
srcs/command_line/slg.c:	cmdl->ccp.cpy = NULL;
srcs/command_line/slg.c:	cmdl->line.len = 1024;
srcs/command_line/slg.c:	cmdl->line.cur = 3;
srcs/command_line/slg.c:	cmdl->line.pr = 3;
srcs/command_line/slg.c:	cmdl->ccp.start = -1;
srcs/command_line/slg.c:	cmdl->ccp.end = -1;
srcs/command_line/slg.c:	cmdl->ccp.ccp = 0;
srcs/command_line/slg.c:		cmdl->line.str = NULL;
srcs/command_line/slg.c:		cmdl->line.save = NULL;
srcs/command_line/slg.c:		cmdl->ccp.cpy = NULL;
srcs/execution/bin_fin_help2.c:	if (lstat(path, &buf) == -1)
srcs/execution/bin_fin_help2.c:	i = -1;
srcs/execution/bin_fin_help2.c:	i = -1;
srcs/execution/bin_fin_help2.c:		if (ft_strcmp(dirp->d_name, ".") != 0 &&
srcs/execution/bin_fin_help2.c:			ft_strcmp(dirp->d_name, "..") != 0)
srcs/execution/bin_fin_help2.c:			if (ft_strcmp(dirp->d_name, cmd) == 0)
srcs/execution/bin_fin_help2.c:	if (env[i - 1] != '/')
srcs/execution/bin_fin_helper.c:			tmp = tmp->right;
srcs/execution/bin_fin_helper.c:	dir = get_dir((*ast)->str);
srcs/execution/bin_fin_helper.c:	if (binary_finder(dir, (*ast)->str) == 1)
srcs/execution/bin_fin_helper.c:	i = -1;
srcs/execution/bin_fin_helper.c:	if ((cmd = binary_find((*ast)->str, path)))
srcs/execution/bin_fin_helper.c:		free((*ast)->str);
srcs/execution/bin_fin_helper.c:		(*ast)->str = ft_strdup(cmd);
srcs/execution/bin_fin_helper.c:		arg[j] = ft_strdup(tmp->str);
srcs/execution/bin_fin_helper.c:		tmp = tmp->right;
srcs/execution/binary_finders.c:		while (tmp && ft_strcmp(tmp->var, var) != 0)
srcs/execution/binary_finders.c:			tmp = tmp->next;
srcs/execution/binary_finders.c:		while (tmp && ft_strcmp(tmp->value, value) != 0)
srcs/execution/binary_finders.c:			tmp = tmp->next;
srcs/execution/binary_finders.c:	if (tmp && tmp->type == IO_SEQ)
srcs/execution/binary_finders.c:		if (io_seq(&tmp->right) != 1)
srcs/execution/binary_finders.c:	i = hash(&tmp->left->left, NULL, FIND);
srcs/execution/binary_finders.c:		if (find_bin(&tmp->left->left) == 0)
srcs/execution/binary_finders.c:			ft_errormsg("42sh: ", (*ast)->left->left->str
srcs/execution/binary_finders.c:	arg = creat_arg(&tmp->left->right, tmp->left->left->str);
srcs/execution/binary_finders.c:	t_env = get_env(env, tmp->left->left->str);
srcs/execution/binary_finders.c:	execution(arg, t_env, &tmp->right);
srcs/execution/binary_finders.c:	i = hash(&tmp->left->left, NULL, FIND);
srcs/execution/binary_finders.c:		if (find_cmd_bin(&tmp->left->left, ft_strsplit(e_n->value, ':')) == 0)
srcs/execution/binary_finders.c:			ft_errormsg("21sh: ", tmp->left->left->str, ": Command not found.");
srcs/execution/binary_finders.c:	arg = creat_arg(&tmp->left->right, tmp->left->left->str);
srcs/execution/binary_finders.c:							(ft_strrchr(tmp->left->left->str, '/') + 1)) : NULL;
srcs/execution/binary_finders.c:	execution(arg, t_env, &tmp->right);
srcs/execution/env_tools.c:		env = env->next;
srcs/execution/env_tools.c:	i = ft_atoi(tmp->value) + 1;
srcs/execution/env_tools.c:	i = ft_atoi(tmp->value);
srcs/execution/env_tools.c:	i--;
srcs/execution/exec_seq.c:	if (tmp->left->type == QM)
srcs/execution/exec_seq.c:		if (qm_seq(&tmp->left, env, type) == 1)
srcs/execution/exec_seq.c:			exec_ast(&tmp->left->right, env);
srcs/execution/exec_seq.c:		exec_ast(&tmp->left, env);
srcs/execution/exec_seq.c:	if (tmp->left->type == OR)
srcs/execution/exec_seq.c:		if (exec_oa(&tmp->left, env, type) == 0)
srcs/execution/exec_seq.c:			(exec_cmd_seq(&tmp->left->right, env, tmp->left->right->type));
srcs/execution/exec_seq.c:	else if (tmp->left->type == AND)
srcs/execution/exec_seq.c:		if (exec_oa(&tmp->left, env, type) == 1)
srcs/execution/exec_seq.c:			return (exec_cmd_seq(&tmp->left->right, env,
srcs/execution/exec_seq.c:				tmp->left->right->type));
srcs/execution/exec_seq.c:	else if (tmp->left->type == PIPE_SEQ)
srcs/execution/exec_seq.c:		return (exec_cmd_seq(&tmp->left, env, PIPE_SEQ));
srcs/execution/exec_seq.c:	else if (tmp->left->type == CMD_SEQ)
srcs/execution/exec_seq.c:		return (exec_cmd_seq(&tmp->left, env, CMD_SEQ));
srcs/execution/exec_tools.c:		if ((ft_strncmp(tmp->left->left->left->str, "./", 2) == 0) ||
srcs/execution/exec_tools.c:			tmp->left->left->left->str[0] == '/')
srcs/execution/exec_tools.c:			abs_cmd(&tmp->left, env);
srcs/execution/exec_tools.c:			rlt_cmd(&tmp->left, env);
srcs/execution/exec_tools.c:		if ((ft_strncmp(tmp->left->left->str, "./", 2) == 0) ||
srcs/execution/exec_tools.c:			tmp->left->left->str[0] == '/')
srcs/execution/exec_tools.c:	if ((ft_strncmp(tmp->left->left->str, "./", 2) == 0) ||
srcs/execution/exec_tools.c:		tmp->left->left->str[0] == '/')
srcs/execution/exec_tools.c:	(*ast)->right ? exec_bina(&(*ast)->right, env, p[0], PIPE_SEQ) : 0;
srcs/execution/get_env.c:	ft_strdel(&(*env)->value);
srcs/execution/get_env.c:		(*env)->value = ft_strdup(str);
srcs/execution/get_env.c:		(*env)->value = NULL;
srcs/execution/get_env.c:		i = ft_strlen(tmp->var) + ft_strlen(tmp->value);
srcs/execution/get_env.c:		newenv[j] = var_value(i, tmp->var, tmp->value);
srcs/execution/get_env.c:		tmp = tmp->next;
srcs/execution/main_exec.c:	status = exec_bina(ast, env, -1, type);
srcs/execution/main_exec.c:		find_cmd_bin(&tmp->left->left,
srcs/execution/main_exec.c:		(arg = ft_strsplit(e_n->value, ':'))) == 1)
srcs/execution/main_exec.c:			hash(&tmp->left, NULL, PUT);
srcs/execution/main_exec.c:			if (tmp->right && tmp->right->type == PIPE)
srcs/execution/main_exec.c:			r != -1 ? dup2(r, STDIN_FILENO) : 0;
srcs/execution/main_exec.c:			pipe_seq(&tmp->right, env, tmp->right->type == PIPE ? 1 : 0);
srcs/execution/main_exec.c:	i = -1;
srcs/execution/main_exec.c:		if (ft_strcmp(cmd[i].cmd, tmp->left->left->str) == 0)
srcs/execution/main_exec.c:	i = -1;
srcs/execution/main_exec.c:	while (tmp && (tmp->type == PIPE_SEQ || tmp->type == QM_SEQ ||
srcs/execution/main_exec.c:			tmp->type == CMD_SEQ || tmp->type == AND_OR))
srcs/execution/main_exec.c:		i = -1;
srcs/execution/main_exec.c:			if (seq[i].type == tmp->type)
srcs/execution/main_exec.c:				seq[i].f(&tmp, env, tmp->type);
srcs/execution/main_exec.c:		tmp = tmp->right;
srcs/execution/redirection.c:	if ((fd = open(tmp->left->str, (tmp->type == RRDIR ? O_APPEND : O_TRUNC) |
srcs/execution/redirection.c:		O_CREAT | O_WRONLY, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH)) != -1)
srcs/execution/redirection.c:		std = tmp->str ? ft_atoi(tmp->str) : STDOUT_FILENO;
srcs/execution/redirection.c:		if (dup2(fd, std) != -1)
srcs/execution/redirection.c:	if ((fd = open(tmp->left->str, O_RDONLY)) != -1)
srcs/execution/redirection.c:		std = tmp->str ? ft_atoi(tmp->str) : STDIN_FILENO;
srcs/execution/redirection.c:		if (dup2(fd, std) != -1)
srcs/execution/redirection.c:		ft_errormsg("21sh: ", tmp->left->str, ": No such file or directory.");
srcs/execution/redirection.c:	std = tmp->str ? ft_atoi(tmp->str) : STDOUT_FILENO;
srcs/execution/redirection.c:	if (ft_strcmp(tmp->left->str, "-") == 0)
srcs/execution/redirection.c:	else if (io_number(tmp->left->str) == 1)
srcs/execution/redirection.c:		fd = ft_atoi(tmp->left->str);
srcs/execution/redirection.c:		if (dup2(fd, std) != -1)
srcs/execution/redirection.c:	if (tmp && (tmp->type >= RDIR && tmp->type <= BGRE))
srcs/execution/redirection.c:		if (tmp->right)
srcs/execution/redirection.c:			if (io_seq(&tmp->right) == 0)
srcs/execution/redirection.c:		i = -1;
srcs/execution/redirection.c:			if (tmp->type == rdir[i].t)
srcs/init_env/check_env.c:	k = ft_tablen(env) - 1;
srcs/init_env/check_env.c:		newenv[++k] = ft_strdup("TERM=xterm-256color");
srcs/init_env/check_env.c:	i = -1;
srcs/init_env/check_env.c:	while (env[++i] && (k = -1))
srcs/job_control/catch_error.c:		ft_putnbrl((*job)->num);
srcs/job_control/catch_error.c:		if ((*job)->num != 1)
srcs/job_control/catch_error.c:		fd_printf(2, "[%d]+  Stopped	%s\n", num, (*job)->command);
srcs/job_control/creat_process.c:	if (find_bin(&tmp->left) == 1)
srcs/job_control/creat_process.c:	return (ft_errormsg("42sh: ", tmp->left->str, ": Command not found."));
srcs/job_control/creat_process.c:	if ((i = hash(&tmp->left, NULL, FIND)) == 0)
srcs/job_control/creat_process.c:		if (e_n && ft_strlen(e_n->value) > 0)
srcs/job_control/creat_process.c:			if (find_cmd_bin(&tmp->left,
srcs/job_control/creat_process.c:					(path = ft_strsplit(e_n->value, ':'))) == 0)
srcs/job_control/creat_process.c:				tmp->left->str, ": Command not found."));
srcs/job_control/creat_process.c:	if (i == 0 && (e_n && !e_n->value))
srcs/job_control/creat_process.c:	if (tmp->left->type == CMD_NAME_ABS)
srcs/job_control/creat_process.c:		argv = creat_arg(&tmp->right, tmp->left->str);
srcs/job_control/env_tools.c:	if ((*ast) && test((*ast)->str))
srcs/job_control/env_tools.c:			var = ft_strsplit(tmp_a->str, '=');
srcs/job_control/env_tools.c:			tmp->var = ft_strdup(var[0]);
srcs/job_control/env_tools.c:			tmp->value = var[1] ? ft_strdup(var[1]) : NULL;
srcs/job_control/env_tools.c:			tmp->next = NULL;
srcs/job_control/env_tools.c:			if (tmp_a->right && (test(tmp_a->right->str) == 1))
srcs/job_control/env_tools.c:				tmp_a = tmp_a->right;
srcs/job_control/env_tools.c:				return (tmp_a->right);
srcs/job_control/env_tools.c:			if (test(tmp->str))
srcs/job_control/env_tools.c:				var = ft_strsplit(tmp->str, '=');
srcs/job_control/env_tools.c:			tmp = tmp->right;
srcs/job_control/env_tools.c:		ft_strdel(&tmp->value);
srcs/job_control/env_tools.c:			tmp->value = ft_strdup(var[1]);
srcs/job_control/env_tools.c:		while (tmp->next)
srcs/job_control/env_tools.c:			tmp = tmp->next;
srcs/job_control/env_tools.c:		tmp->next = node;
srcs/job_control/env_tools.c:		tmp = tmp->next;
srcs/job_control/env_tools.c:	(*node)->var = ft_strdup(env[0]);
srcs/job_control/env_tools.c:	(*node)->value = env[1] ? ft_strdup(env[1]) : NULL;
srcs/job_control/env_tools.c:	(*node)->next = NULL;
srcs/job_control/env_tools.c:		if ((new_ast->left->left->type == CMD_NAME_ABS ?
srcs/job_control/env_tools.c:			find_bin(&new_ast->left->left) :
srcs/job_control/env_tools.c:				find_rlt(&new_ast->left->left, r_env)) == 1)
srcs/job_control/env_utils.c:	if (!((*env)->next = (t_env*)malloc(sizeof(t_env))))
srcs/job_control/env_utils.c:	(*env)->next->next = NULL;
srcs/job_control/env_utils.c:	return ((*env)->next);
srcs/job_control/env_utils.c:	if (find_cmd_bin(cmd, (value = ft_strsplit(path->value, ':'))) == 0)
srcs/job_control/env_utils.c:		return (ft_errormsg("21sh: ", (*cmd)->str, ": Command not found."));
srcs/job_control/env_utils.c:	(*cmd)->type = CMD_NAME_ABS;
srcs/job_control/env_utils.c:	new_cmd = ft_strdup(tmp->str);
srcs/job_control/env_utils.c:	(tmp = tmp->right)
srcs/job_control/env_utils.c:		new_cmd = ft_strjoinf(new_cmd, tmp->str, 1);
srcs/job_control/env_utils.c:		if ((tmp = tmp->right))
srcs/job_control/env_utils.c:	while (tmp && tmp->str[0] == '-')
srcs/job_control/env_utils.c:		if (tmp->str[1] != '-')
srcs/job_control/env_utils.c:			env_opt(tmp->str, flags);
srcs/job_control/env_utils.c:			if ((*flags) == -1)
srcs/job_control/env_utils.c:		else if (tmp->str[2] == '\0')
srcs/job_control/env_utils.c:			return (tmp->right);
srcs/job_control/env_utils.c:		tmp = tmp->right;
srcs/job_control/env_utils.c:			ft_putstr_fd("env : illegal option -- ", 2);
srcs/job_control/env_utils.c:			(*flags) = -1;
srcs/job_control/env_utils2.c:	i = -1;
srcs/job_control/foreground.c:	phead = (*table)->first_process;
srcs/job_control/foreground.c:	while ((*table)->next)
srcs/job_control/foreground.c:		(*table) = (*table)->next;
srcs/job_control/foreground.c:	if ((*table)->first_process->stopped != 1)
srcs/job_control/foreground.c:		phead = (*table)->first_process;
srcs/job_control/foreground.c:		printf("[%d]+  Stopped			%s\n", nbjob, (*table)->command);
srcs/job_control/foreground.c:		kill((*table)->pgid, SIGTSTP);
srcs/job_control/foreground.c:		(*table)->first_process = phead;
srcs/job_control/foreground.c:	p = (*job)->first_process;
srcs/job_control/foreground.c:		p->stopped = 0;
srcs/job_control/foreground.c:		p = p->next;
srcs/job_control/foreground.c:		while (j->next)
srcs/job_control/foreground.c:			j = j->next;
srcs/job_control/foreground.c:			if (kill(-j->pgid, SIGCONT) < 0)
srcs/job_control/foreground.c:		if ((*ast)->left->right)
srcs/job_control/foreground.c:				if (j->pgid == ft_atoi((*ast)->left->right->str))
srcs/job_control/foreground.c:					j = j->next;
srcs/job_control/foreground.c:				          (*ast)->left->right->str);
srcs/job_control/foreground.c:			while (j->next)
srcs/job_control/foreground.c:				j = j->next;
srcs/job_control/foreground.c:			if (kill(-j->pgid, SIGCONT) < 0)
srcs/job_control/foreground.c:			tcsetpgrp(g_shell_terminal, j->pgid);
srcs/job_control/foreground.c:	if ((*ast)->left->right)
srcs/job_control/foreground.c:		fd_printf(2, "42sh: fg: %s: no such job\n", (*ast)->left->right->str);
srcs/job_control/init_tools.c:		return (-1);
srcs/job_control/init_tools.c:	(*job)->num = 0;
srcs/job_control/init_tools.c:	(*job)->command = NULL;
srcs/job_control/init_tools.c:	(*job)->pgid = 0;
srcs/job_control/init_tools.c:	(*job)->first_process = NULL;
srcs/job_control/init_tools.c:	(*job)->next = NULL;
srcs/job_control/init_tools.c:	(*job)->notified = 0;
srcs/job_control/init_tools.c:		return (-1);
srcs/job_control/init_tools.c:	(*process)->status = 0;
srcs/job_control/init_tools.c:	(*process)->argv = NULL;
srcs/job_control/init_tools.c:	(*process)->rdir = NULL;
srcs/job_control/init_tools.c:	(*process)->stopped = 0;
srcs/job_control/init_tools.c:	(*process)->completed = 0;
srcs/job_control/init_tools.c:	(*process)->pid = 0;
srcs/job_control/init_tools.c:	(*process)->next = NULL;
srcs/job_control/init_tools.c:		while (tmp->next)
srcs/job_control/init_tools.c:			tmp = tmp->next;
srcs/job_control/init_tools.c:		if (init_proc(&tmp->next) == -1)
srcs/job_control/init_tools.c:			return (-1);
srcs/job_control/init_tools.c:		if (init_proc(proc) == -1)
srcs/job_control/init_tools.c:			return (-1);
srcs/job_control/init_tools.c:	if ((tmp->argv = creat_arg_process(&(*ast)->left, env)) != NULL)
srcs/job_control/init_tools.c:		tmp->rdir = (*ast)->right != NULL ? (*ast)->right->right : NULL;
srcs/job_control/init_tools.c:	tmp = (*ast)->right;
srcs/job_control/init_tools.c:	while (tmp && (tmp->type == PIPE || tmp->type == CMD_SEQ))
srcs/job_control/init_tools.c:		if (tmp->type == PIPE)
srcs/job_control/init_tools.c:			cmd = !cmd ? init_job_name(&tmp->left) :
srcs/job_control/init_tools.c:			ft_strjoinf(cmd, (get = init_job_name(&tmp->left)), 1);
srcs/job_control/init_tools.c:		else if (tmp->type == CMD_SEQ)
srcs/job_control/init_tools.c:		if ((tmp = tmp->right) && (tmp->type == PIPE || tmp->type == CMD_SEQ))
srcs/job_control/init_tools.c:	if (tmp->type == PIPE)
srcs/job_control/init_tools.c:		if (init_process(&tmp->left, p, env) == 0)
srcs/job_control/init_tools.c:		return (complete_process(&tmp->right, &(*p)->next, env));
srcs/job_control/job_bg_seq.c:	(*lst)->next ? exec_pipe_bg(&(*lst)->next, env, p[0], job) : 0;
srcs/job_control/job_bg_seq.c:		if (!(tmp->pid = fork()))
srcs/job_control/job_bg_seq.c:			setpgid(tmp->pid, ((*job)->pgid == 0 ? getpid() : (*job)->pgid));
srcs/job_control/job_bg_seq.c:			tmp->next != NULL ? dup2(p[1], STDOUT_FILENO) : 0;
srcs/job_control/job_bg_seq.c:			r != -1 ? dup2(r, STDIN_FILENO) : 0;
srcs/job_control/job_bg_seq.c:			if (tmp->rdir)
srcs/job_control/job_bg_seq.c:				io_seq(&tmp->rdir);
srcs/job_control/job_bg_seq.c:			execve(tmp->argv[0], tmp->argv, env);
srcs/job_control/job_bg_seq.c:			(*job)->pgid == 0 ? (*job)->pgid = tmp->pid : 0;
srcs/job_control/job_bg_seq.c:			setpgid(tmp->pid, (*job)->pgid);
srcs/job_control/job_bg_seq.c:			if (kill(-tmp->pid, SIGCONT) < 0)
srcs/job_control/job_bg_seq.c:			return (tmp->status);
srcs/job_control/job_bg_seq.c:	n_env = get_env(env, p->argv[0]);
srcs/job_control/job_bg_seq.c:	if (!(p->pid = fork()))
srcs/job_control/job_bg_seq.c:		if (p->rdir)
srcs/job_control/job_bg_seq.c:			io_seq(&p->rdir);
srcs/job_control/job_bg_seq.c:		execve(p->argv[0], p->argv, n_env);
srcs/job_control/job_bg_seq.c:		(*job)->pgid = p->pid;
srcs/job_control/job_bg_seq.c:		setpgid(p->pid, p->pid);
srcs/job_control/job_bg_seq.c:		if (kill(-(*job)->pgid, SIGCONT) < 0)
srcs/job_control/job_bg_seq.c:	return (p->status);
srcs/job_control/job_bg_seq.c:	status = exec_pro_bg(&(*job)->first_process, env, job);
srcs/job_control/job_bg_seq.c:		job->command = init_job_name(ast);
srcs/job_control/job_bg_seq.c:		if (!init_process(ast, &job->first_process, env))
srcs/job_control/job_bg_seq.c:			return (-1);
srcs/job_control/job_bg_seq.c:	return (-1);
srcs/job_control/job_bg_seq.c:	tmp = (*ast)->type == BG_SEQ ? (*ast)->right : *ast;
srcs/job_control/job_bg_seq.c:	if (tmp->type == BG)
srcs/job_control/job_bg_seq.c:		job_ast(&tmp->left, env, foreground);
srcs/job_control/job_bg_seq.c:		if (tmp->right)
srcs/job_control/job_bg_seq.c:			job_bg_seq(&tmp->right, env, foreground);
srcs/job_control/job_control.c:	cmd = ft_strdup(tmp->left->left->str);
srcs/job_control/job_control.c:	if (tmp->left->right)
srcs/job_control/job_control.c:		tmp2 = tmp->left->right;
srcs/job_control/job_control.c:			cmd = ft_strjoinf(cmd, tmp2->str, 1);
srcs/job_control/job_control.c:			if ((tmp2 = tmp2->right))
srcs/job_control/job_control.c:	if (tmp->right)
srcs/job_control/job_control.c:		tmp2 = tmp->right->right;
srcs/job_control/job_control.c:			tmp2->str ? cmd = ft_strjoinf(cmd, tmp2->str, 1) : 0;
srcs/job_control/job_control.c:			cmd = ft_strjoinf(cmd, rdir_print(tmp2->type), 1);
srcs/job_control/job_control.c:			if (ft_strcmp(tmp2->left->str, "-") != 0)
srcs/job_control/job_control.c:			cmd = ft_strjoinf(cmd, tmp2->left->str, 1);
srcs/job_control/job_control.c:			if ((tmp2 = tmp2->right))
srcs/job_control/job_env.c:	tmp = env_option(&tmp->left->right, &flag);
srcs/job_control/job_env.c:	if (flag != -1)
srcs/job_control/job_env.c:			(*n_env)->next = NULL;
srcs/job_control/job_env.c:						if (!ft_strcmp((*ast)->str, tmp->var))
srcs/job_control/job_env.c:							tmp = tmp->next;
srcs/job_control/job_env.c:				tmp_n->var = ft_strdup(tmp->var);
srcs/job_control/job_env.c:				tmp_n->value = ft_strdup(tmp->value);
srcs/job_control/job_env.c:				if (tmp->next)
srcs/job_control/job_env.c:				tmp = tmp->next;
srcs/job_control/job_env.c:			tmp_n->next = NULL;
srcs/job_control/job_env.c:	return (complete_env(n_env, (flag & LOW_U_FLAG) ? &(*ast)->right : ast));
srcs/job_control/job_exec.c:	while (tmp && tmp->type >= QM_SEQ && tmp->type <= AND_OR)
srcs/job_control/job_exec.c:		i = -1;
srcs/job_control/job_exec.c:			if (seq[i].type == tmp->type)
srcs/job_control/job_exec.c:		tmp = tmp->right;
srcs/job_control/job_exec.c:		if (j->command)
srcs/job_control/job_exec.c:			ft_strdel(&j->command);
srcs/job_control/job_exec.c:		p = j->first_process;
srcs/job_control/job_exec.c:			if (tmp->argv)
srcs/job_control/job_exec.c:				ft_freetab(tmp->argv);
srcs/job_control/job_exec.c:			if (tmp->rdir)
srcs/job_control/job_exec.c:				tmp->rdir = NULL;
srcs/job_control/job_exec.c:			p = p->next;
srcs/job_control/job_exec.c:	return (-1);
srcs/job_control/job_exec.c:	i = -1;
srcs/job_control/job_exec.c:		if (!ft_strcmp(cmd[i].cmd, tmp->left->left->str))
srcs/job_control/job_exec.c:		job->command = init_job_name(ast);
srcs/job_control/job_exec.c:		if (!init_process(ast, &(job)->first_process, env))
srcs/job_control/job_exec.c:	return (-1);
srcs/job_control/job_exec.c:		status = exec_pro(&(*job)->first_process, env, job);
srcs/job_control/job_exec.c:		exec_pro_bg(&(*job)->first_process, env, job);
srcs/job_control/job_exec.c:	n_env = get_env(env, tmp->argv[0]);
srcs/job_control/job_exec.c:	if (!(tmp->pid = fork()))
srcs/job_control/job_exec.c:			tcsetpgrp(g_shell_terminal, tmp->pid);
srcs/job_control/job_exec.c:		if (tmp->rdir)
srcs/job_control/job_exec.c:		io_seq(&tmp->rdir);
srcs/job_control/job_exec.c:		execve(tmp->argv[0], tmp->argv, n_env);
srcs/job_control/job_exec.c:		(*j)->pgid = tmp->pid;
srcs/job_control/job_exec.c:		setpgid(tmp->pid, (*j)->pgid);
srcs/job_control/job_exec.c:		tcsetpgrp(g_shell_terminal, (*j)->pgid);
srcs/job_control/job_exec.c:	return (tmp->status);
srcs/job_control/job_exec_seq.c:	if (tmp->left->type == QM)
srcs/job_control/job_exec_seq.c:		if (job_qm_seq(&tmp->left, env, foreground) == 1)
srcs/job_control/job_exec_seq.c:			job_ast(&tmp->left->right, env, foreground);
srcs/job_control/job_exec_seq.c:	else if (tmp->left->type == CMD_SEQ)
srcs/job_control/job_exec_seq.c:		job_ast(&tmp->left, env, foreground);
srcs/job_control/job_exec_seq.c:	if (tmp->type == OR)
srcs/job_control/job_exec_seq.c:		if (job_oa_seq(&tmp->left, env, foreground) == 0)
srcs/job_control/job_exec_seq.c:			return (job_oa_seq(&tmp->right, env, foreground));
srcs/job_control/job_exec_seq.c:	else if (tmp->type == AND)
srcs/job_control/job_exec_seq.c:		if (job_oa_seq(&tmp->left, env, foreground) == 1)
srcs/job_control/job_exec_seq.c:			return (job_oa_seq(&tmp->right, env, foreground));
srcs/job_control/job_exec_seq.c:	else if (tmp && tmp->type == PIPE_SEQ)
srcs/job_control/job_exec_seq.c:	else if (tmp && tmp->type == CMD_SEQ)
srcs/job_control/job_exec_seq.c:	return (job_oa_seq(&(*ast)->left, env, foreground));
srcs/job_control/job_exec_seq.c:	i = -1;
srcs/job_control/job_exec_seq.c:	while (tmp->argv[++i])
srcs/job_control/job_exec_seq.c:		printf("%s\n", tmp->argv[i]);
srcs/job_control/job_handle.c:		(*table) = (*table)->next;
srcs/job_control/job_handle.c:			tmp = tmp->next;
srcs/job_control/job_handle.c:			j->num = i;
srcs/job_control/job_handle.c:			p = j->first_process;
srcs/job_control/job_handle.c:				waitpid(p->pid, &p->status, WUNTRACED | WCONTINUED | WNOHANG);
srcs/job_control/job_handle.c:				p = p->next;
srcs/job_control/job_handle.c:			j = j->next;
srcs/job_control/job_handle.c:			j = j->next;
srcs/job_control/job_handle.c:			j = j->next;
srcs/job_control/job_handle.c:			if (len == j->num)
srcs/job_control/job_handle.c:			else if (len - 1 == j->num)
srcs/job_control/job_handle.c:				symb = '-';
srcs/job_control/job_handle.c:				fd_printf(2, "[%d]%c Segmentation fault: 11 %s\n", symb,  j->num, j->command);
srcs/job_control/job_handle.c:				fd_printf(2, "[%d]%c Abort trap: 6 \t\t%s\n", symb, j->num, j->command);
srcs/job_control/job_handle.c:				fd_printf(2, "[%d]%c Bus error: 10 \t\t%s\n", symb,  j->num, j->command);
srcs/job_control/job_handle.c:				fd_printf(2, "[%d]%c Terminated: \t\t15 %s\n", symb,  j->num, j->command);
srcs/job_control/job_handle.c:				fd_printf(2, "[%d]%c Stopped\t\t\t%s\n", symb, j->num, j->command);
srcs/job_control/job_handle.c:			j = j->next;
srcs/job_control/job_handle.c:	i = -1;
srcs/job_control/job_handle_utils.c:		while (tmp->next)
srcs/job_control/job_handle_utils.c:			tmp = tmp->next;
srcs/job_control/job_handle_utils.c:		tmp->next = *new;
srcs/job_control/job_handle_utils.c:	ft_freetab((*tmp)->argv);
srcs/job_control/job_handle_utils.c:	(*tmp)->pid = 0;
srcs/job_control/job_handle_utils.c:	(*tmp)->rdir = NULL;
srcs/job_control/job_handle_utils.c:	(*tmp) = (*tmp)->next;
srcs/job_control/job_handle_utils.c:	if ((*node)->next)
srcs/job_control/job_handle_utils.c:		(*prev) ? ((*prev)->next =
srcs/job_control/job_handle_utils.c:		(*node)->next) : ((*table) = (*node)->next);
srcs/job_control/job_handle_utils.c:		(*prev) ? ((*prev)->next = NULL)
srcs/job_control/job_handle_utils.c:		ft_strdel(&(*node)->command);
srcs/job_control/job_handle_utils.c:		tmp = (*node)->first_process;
srcs/job_control/job_handle_utils.c:		(*node)->first_process = NULL;
srcs/job_control/job_handle_utils.c:		(*node)->pgid = 0;
srcs/job_control/job_pipe.c:	printf("[Jobs = %s | %d]\n", (*job)->command, (*job)->pgid);
srcs/job_control/job_pipe.c:	p = (*job)->first_process;
srcs/job_control/job_pipe.c:		i = -1;
srcs/job_control/job_pipe.c:		printf("PID: %d\n", p->pid);
srcs/job_control/job_pipe.c:		while (p->argv[++i])
srcs/job_control/job_pipe.c:		p = p->next;
srcs/job_control/job_pipe.c:		tmp->command = init_pipe_job(ast);
srcs/job_control/job_pipe.c:		if (complete_process(&(*ast)->right, &tmp->first_process, env) == 1)
srcs/job_control/job_pipe.c:	n_env = get_env(env, tmp->first_process->argv[0]);
srcs/job_control/job_pipe.c:		status = exec_pipe_job(&tmp->first_process, n_env, -1, lst);
srcs/job_control/job_pipe.c:		status = exec_pipe_bg(&tmp->first_process, n_env, -1, lst);
srcs/job_control/job_pipe.c:	(*lst)->next != NULL ? exec_pipe_job(&(*lst)->next, env, p[0], job) : 0;
srcs/job_control/job_pipe.c:		if ((tmp->pid = fork()) == 0)
srcs/job_control/job_pipe.c:			tmp->next != NULL ? dup2(p[1], STDOUT_FILENO) : 0;
srcs/job_control/job_pipe.c:			if (r != -1)
srcs/job_control/job_pipe.c:			if (tmp->rdir)
srcs/job_control/job_pipe.c:				io_seq(&tmp->rdir);
srcs/job_control/job_pipe.c:			setpgid(getpid(), ((*job)->pgid == 0 ? getpid() : (*job)->pgid));
srcs/job_control/job_pipe.c:			tcsetpgrp(g_shell_terminal, (*job)->pgid);
srcs/job_control/job_pipe.c:			execve(tmp->argv[0], tmp->argv, env);
srcs/job_control/job_pipe.c:			(*job)->pgid == 0 ? (*job)->pgid = tmp->pid : 0;
srcs/job_control/job_pipe.c:			setpgid(tmp->pid, (*job)->pgid);
srcs/job_control/job_pipe.c:			tcsetpgrp(g_shell_terminal, (*job)->pgid);
srcs/job_control/job_pipe.c:			waitpid(tmp->pid, &tmp->status, WUNTRACED | WCONTINUED);
srcs/job_control/job_pipe.c:			catch_error(job, tmp->status);
srcs/job_control/job_pipe.c:	return (tmp->status);
srcs/job_control/job_tools.c:			kill(-g_shell_pgid, SIGTTIN);
srcs/job_control/job_tools.c:	p = j->first_process;
srcs/job_control/job_tools.c:		if (!p->completed && !p->stopped)
srcs/job_control/job_tools.c:		p = p->next;
srcs/job_control/job_tools.c:	p = j->first_process;
srcs/job_control/job_tools.c:		if (!p->completed)
srcs/job_control/job_tools.c:		p = p->next;
srcs/job_control/job_tools.c:	p = (*job)->first_process;
srcs/job_control/job_tools.c:		if (p->pid == pid)
srcs/job_control/job_tools.c:			p->status = status;
srcs/job_control/job_tools.c:				p->stopped = 1;
srcs/job_control/job_tools.c:				p->completed = 1;
srcs/job_control/job_tools.c:				p->completed = 1;
srcs/job_control/job_tools.c:		p = p->next;
srcs/job_control/job_tools.c:	p = (*job)->first_process;
srcs/job_control/job_tools.c:		p->stopped = 1;
srcs/job_control/job_tools.c:		p = p->next;
srcs/job_control/job_tools.c:		p = (*job)->first_process;
srcs/job_control/job_tools.c:			if (WIFSTOPPED(p->status))
srcs/job_control/job_tools.c:				p->stopped = 1;
srcs/job_control/job_tools.c:			else if (WIFEXITED(p->status) && !WEXITSTATUS(p->status))
srcs/job_control/job_tools.c:				p->completed = 1;
srcs/job_control/job_tools.c:			else if (WIFSIGNALED(p->status))
srcs/job_control/job_tools.c:				p->completed = 1;
srcs/job_control/job_tools.c:			p = p->next;
srcs/job_control/kill_job.c:		tmp = (*ast)->left;
srcs/lexer/expanse.c:	var = ft_strsub(str, s + 1, len - 1);
srcs/lexer/expanse.c:		beg = ft_strjoinf(beg, var_env->value, 1);
srcs/lexer/expanse.c:			tmp2 = ft_strdup(var_env->value);
srcs/lexer/expanse.c:		if (tmp->type == DQUOTE || tmp->type == WORD)
srcs/lexer/expanse.c:			tmp->type == WORD ? tild(&tmp->str, env) : 0;
srcs/lexer/expanse.c:			if (check_expanse(&tmp->str, env))
srcs/lexer/expanse.c:				!prev ? *lst = tmp->n : 0;
srcs/lexer/expanse.c:				prev ? prev->n = tmp->n : 0;
srcs/lexer/expanse.c:		tmp = tmp->n;
srcs/lexer/expanse.c:		save ? free(save->str) : 0;
srcs/lexer/jonathan_kent.c:		init_token(&(*lst)->n);
srcs/lexer/jonathan_kent.c:		*lst = (*lst)->n;
srcs/lexer/jonathan_kent.c:		init_token(&(*lst)->n);
srcs/lexer/jonathan_kent.c:		*lst = (*lst)->n;
srcs/lexer/jonathan_kent.c:	j = -1;
srcs/lexer/jonathan_kent.c:	j == 3 ? (*i)-- : (*i);
srcs/lexer/jonathan_kent.c:		init_token(&(*lst)->n);
srcs/lexer/jonathan_kent.c:		*lst = (*lst)->n;
srcs/lexer/jonathan_kent.c:		init_token(&(*lst)->n);
srcs/lexer/jonathan_kent.c:		*lst = (*lst)->n;
srcs/lexer/jonathan_kent.c:		init_token(&(*lst)->n);
srcs/lexer/jonathan_kent.c:		*lst = (*lst)->n;
srcs/lexer/jonathan_kent.c:		init_token(&(*lst)->n);
srcs/lexer/jonathan_kent.c:		*lst = (*lst)->n;
srcs/lexer/jonathan_kent.c:	init_token(&(*lst)->n);
srcs/lexer/jonathan_kent.c:	*lst = (*lst)->n;
srcs/lexer/jonathan_kent.c:		init_token(&(*lst)->n);
srcs/lexer/jonathan_kent.c:		*lst = (*lst)->n;
srcs/lexer/jonathan_kent.c:		init_token(&(*lst)->n);
srcs/lexer/jonathan_kent.c:		*lst = (*lst)->n;
srcs/lexer/lex_luthor.c:	(*lst)->type = 0;
srcs/lexer/lex_luthor.c:	(*lst)->str = NULL;
srcs/lexer/lex_luthor.c:	(*lst)->n = NULL;
srcs/lexer/lex_luthor.c:	if (!((*lst)->str = (char*)malloc(sizeof(char) * (i + 1))))
srcs/lexer/lex_luthor.c:	i = -1;
srcs/lexer/lex_luthor.c:		(*lst)->str[i] = (*stack)[i];
srcs/lexer/lex_luthor.c:	(*lst)->str[i] = '\0';
srcs/lexer/lex_luthor.c:	if (type == WORD && ft_isalpha((*lst)->str[0]) &&
srcs/lexer/lex_luthor.c:			ft_strchr((*lst)->str, '='))
srcs/lexer/lex_luthor.c:		(*lst)->type = LOCAL;
srcs/lexer/lex_luthor.c:		(*lst)->type = type;
srcs/lexer/lex_luthor.c:	if ((*lst)->type != QUOTE && (bs = ft_strchr((*lst)->str, '\\')) &&
srcs/lexer/lex_luthor.c:		ft_strleft(&(*lst)->str, '\\');
srcs/lexer/lex_luthor.c:			init_token(&(*lst)->n);
srcs/lexer/lex_luthor.c:			*lst = (*lst)->n;
srcs/lexer/lex_luthor.c:	(*i)--;
srcs/lexer/lex_luthor.c:		j = -1;
srcs/lexer/lexer_check.c:	if (tmp->type == SPACE_TOK)
srcs/lexer/lexer_check.c:		tmp = tmp->n;
srcs/lexer/lexer_check.c:	if (tmp->type <= CHEVRON)
srcs/lexer/lexer_check.c:		i = -1;
srcs/lexer/lexer_check.c:		if (tmp->type == CHEVRON)
srcs/lexer/lexer_check.c:				if (ft_strcmp(dir[i].ch, tmp->str) == 0)
srcs/lexer/lexer_check.c:					tmp->type = dir[i].type;
srcs/lexer/lexer_check.c:		tmp = tmp->n;
srcs/lexer/lexer_check.c:		if (tmp->type == CHEVRON && !tmp->n)
srcs/lexer/lexer_check.c:		else if (tmp->type == CHEVRON && (tmp->n->str[0] == '<'
srcs/lexer/lexer_check.c:		|| tmp->n->str[0] == '&' || tmp->n->str[0] == ';'
srcs/lexer/lexer_check.c:		|| tmp->n->str[0] == '>' || tmp->n->str[0] == ')'
srcs/lexer/lexer_check.c:		|| tmp->n->str[0] == '|'))
srcs/lexer/lexer_check.c:			tmp->str));
srcs/lexer/lexer_check.c:		else if ((tmp->type == QM && tmp->n && tmp->n->type == QM) ||
srcs/lexer/lexer_check.c:		(tmp == *lst && tmp->type == QM && !tmp->n))
srcs/lexer/lexer_check.c:			tmp = tmp->n;
srcs/lexer/lexer_check.c:	while ((*lst)->type != WORD)
srcs/lexer/lexer_check.c:		if ((*lst)->type == CHEVRON)
srcs/lexer/lexer_check.c:			(*lst) = (*lst)->n;
srcs/lexer/lexer_check.c:			if ((*lst)->n && ((*lst)->n->type != QM && (*lst)->n->type != AND &&
srcs/lexer/lexer_check.c:			(*lst)->n->type != OR && (*lst)->n->type != PIPE) && (*lst)->n->type != IO_N)
srcs/lexer/lexer_check.c:				(*lst)->n->type != CHEVRON ? save_last = (*lst) : 0;
srcs/lexer/lexer_check.c:				(*lst) = (*lst)->n;
srcs/lexer/lexer_check.c:				save_last ? save_last->n = NULL : 0;
srcs/lexer/lexer_check.c:			(*lst) = (*lst)->n;
srcs/lexer/lexer_check.c:	(*command)->n = (*lst);
srcs/lexer/lexer_check.c:	while ((*lst)->n && (*lst)->n->type == WORD)
srcs/lexer/lexer_check.c:		(*lst) = (*lst)->n;
srcs/lexer/lexer_check.c:	save_next = (*lst)->n;
srcs/lexer/lexer_check.c:	(*lst)->n = save_lst;
srcs/lexer/lexer_check.c:	save_last->n = save_next;
srcs/lexer/lexer_check.c:		if (tmp->type == CHEVRON || tmp->type == IO_N)
srcs/lexer/lexer_check.c:		else if (tmp->type == LOCAL && ((tmp->n && tmp->n->type != WORD) || !tmp->n))
srcs/lexer/lexer_check.c:			tmp->type = WORD;
srcs/lexer/lexer_check.c:			tmp = tmp->n;
srcs/lexer/the_dog.c:		(*cmd) = (*cmd)->n;
srcs/lexer/the_dog.c:		ft_strdel(&tmp->str);
srcs/main.c:		printf("t: %d |%s|\n", r->type, r->str);
srcs/main.c:		if (r->left)
srcs/main.c:			printf("%*c|-left--: ", (l + 1) * 2, ' ');
srcs/main.c:			ft_rec_putbtreestr(r->left, l + 1);
srcs/main.c:		if (r->right)
srcs/main.c:			printf("%*c|-right-: ", (l + 1) * 2, ' ');
srcs/main.c:			ft_rec_putbtreestr(r->right, l + 1);
srcs/main.c:		if (cmdl->opt & CCTRLD)
srcs/main.c:		if (cmdl->line.str && !(cmdl->line.str[0] == '\\' &&
srcs/main.c:		cmdl->line.str[1] == 0))
srcs/main.c:			exec_part(&cmdl->line.str, &cmdl->lstenv);
srcs/main.c:			loc = loc->n;
srcs/main.c:	if (set_shell(cmdl) || get_win_data(cmdl) || init_env(&(cmdl->lstenv), env))
srcs/main.c:	return (cmdl->exit ? cmdl->exit : 0);
srcs/print_prompt.c:	while (tmp->next && ft_strcmp(tmp->var, cmp))
srcs/print_prompt.c:		tmp = tmp->next;
srcs/print_prompt.c:	if (cmdl->lstenv)
srcs/print_prompt.c:		H_BLUE, lst_at(&(cmdl)->lstenv, "PWD")->value, I);
srcs/print_prompt.c:	if (!(cmdl->opt & CSQ) && !(cmdl->opt & CDQ))
srcs/print_prompt.c:	else if ((cmdl->opt & CSQ) || (cmdl->opt & CDQ))
srcs/print_prompt.c:		cmdl->opt & CSQ ? write(1, "\nquote> ", 8)
