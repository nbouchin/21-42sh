diff --git a/.42sh_history b/.42sh_history
index f7e564a..62f94a6 100755
--- a/.42sh_history
+++ b/.42sh_history
@@ -1,69 +1,88 @@
 ls 1
-ls 2
-cat .42sh_history
-ls
-ls 1
-ls srcs
+ls-l | cat -e
+ls-l | cat -e
+ls -l | cat -e
+ls -l" | cat -e"
+ls -l " | cat -e"
+ls -l | cat -e
+ls -l | cat -e
+ls -l | cat -e &
+env
+ls "LOL"$PWD
+ls "LOL"$PWD
+ls "LOL"$PWD
+ls "LOL"$PWD
+ls "LOL"$PWD
+ls "LOL"$
+ls "LOL"$PATH
+ls $PATH
+ls "LANG"'$PWD'$USER
+ls "LANG"'$PWD'$USER"MDR"
+ls "LANG"'$PWD'$USER"MDR"
+ls "LANG"'$PWD'$USER"MDR"
+ls "$LANG"'$PWD'$USER"MDR"
 leaks 42sh
-ls srcs
-ls 1
-ls
-ls 1
-ls
-ls 1
-ls
-^ ^
-^ ^
-^ ^
-ls srcs/ ; ^libft^srcs
-ls 
 ls
-echo lol
-make
-ls 1
-ls 1
-ls libft
-^ ^
-ls 1
-ls libft
-export \\PO=42
-env
-export =42
-env
-export =42
-export \42=42
+ls "$LANG"'$PWD'$USER"MDR"
+leaks 42sh
+unset HOME
 env
-export \\42=42
+ls ~
+ls ~/
+unset HOME
+ls ~
+ls ~$
 env
-export \\42=42
-export 42=42
-export =42
-vi libft
-vi libft/libf/ft_isdigit.c
-vi libft/libf/ft_isalpha.c
-export =45
-vi libft/libf/ft_isalpha.c
-export =42
-export \=42
-export \\=42
-ls \|
-ls \\|
-ls |
-ls |
-ls |
-ls | 
-ls |
-ls | cat -e ; ls ||cat -e
+cat | grep
+ps
+ps -j
+cat | grep
 ls
+ls ""
+ls ""
+ls ''
+ls ' '
+env
+ls $SHLVL" mdr xD lol $SHELL  $HOME $LESS"mdr 
+ls $SHLVL" mdr xD lol $SHELL  $HOME $LESS"mdr 
+ls $SHLVL" mdr xD lol $SHELL  $HOME $LESS"mdr 
+ls $SHLVL" mdr xD lol $SHELL  $HOME $LESS"mdr 
+ls $SHLVL" mdr xD lol $SHELL  $HOME $LESS"mdr 
+ls $SHLVL" mdr xD lol $SHELL  $HOME $LESS"mdr 
+ls $SHLVL" mdr xD lol $SHELL  $HOME $LESS"mdr 
+ls $SHLVL" mdr xD lol $SHELL  $HOME $LESS"mdr 
 make
-asdasdzxcsd
-zxczxcasdasd
-ls $PATH
-ETC=123
-ls $__CF_USER_TEXT_ENCODING
-ls 1456
-s
-ls 12456
+ls $SHLVL" mdr xD lol $SHELL  $HOME $LESS"mdr 
+ls $SHLVL" mdr xD lol $SHELL  $HOME $LESS"mdr 
+ls $SHLVL" mdr xD lol $SHELL  $HOME $LESS"mdr 
+ls $" mdr xD lol $SHELL  $HOME $LESS"mdr 
+ls $" mdr xD lol $SHELL  $HOME $LESS"mdr'LOOOOOOOOOOOOOOOOOOOOOOOOOOOOOL'
+ls $" mdr xD lol $SHELL  $HOME $LESS""CA PASSE PLAS"
+ls $" mdr xD lol $SHELL  $HOME $LESS""CA PASSE PLAS"
+ls $" mdr xD lol $SHELL  $HOME $LESS""CA PASSE PLAS"
+ls $" mdr xD lol $SHELL  $HOME $LESS"'CA PASSE PLAS'
+ls $" mdr xD lol $SHELL  $HOME $LESS"'CA PASSE PLAS'
+ls $" mdr xD lol $SHELL  $HOME $LESS"mdr'CA PASSE PLAS'
+ls $" mdr xD lol $SHELL  $HOME $LESS"mdr $USER'CA PASSE PLAS'
+ls $" mdr xD lol $SHELL  $HOME $LESS"mdr $USER'CA PASSE PLAS'
+ls -lR / | cat -e
+fg
+ls -lR / | cat -e
+vim
+ls -lR / | cat -e
+ls
+ls -lR / | cat -e
+ls -lR / | cat -e
+ls -lR / | cat -e
+ls -lR / | cat -e
 make
-ls 12346
-ls 12345
+ls -lR / | cat -e
+oqijfqwoifmqwlf qfqwf qw fwq fqw fw f qf qw f qwf 
+ls -l | cat -e 
+ls -lR / | cat -e 
+ls -lR / | cat -e 
+ls -lR / | cat -e 
+jobs
+jobs
+fg
+jobs
diff --git a/Makefile b/Makefile
index ef798fe..801eeb0 100644
--- a/Makefile
+++ b/Makefile
@@ -6,7 +6,7 @@
 #    By: zadrien <zadrien@student.42.fr>            +#+  +:+       +#+         #
 #                                                 +#+#+#+#+#+   +#+            #
 #    Created: 2017/05/02 18:16:06 by zadrien           #+#    #+#              #
-#    Updated: 2017/10/15 17:59:38 by khabbar          ###   ########.fr        #
+#    Updated: 2017/10/15 18:04:29 by zadrien          ###   ########.fr        #
 #                                                                              #
 # **************************************************************************** #
 
@@ -32,11 +32,11 @@ CFILES= 		main.c \
 				lexer/lex_luthor.c \
 				lexer/lexer_check.c \
 				lexer/martha_kent.c \
-				lexer/expanse.c \
 				lexer/jonathan_kent.c \
 				lexer/the_dog.c \
 				lexer/misc_lexer.c \
-				lexer/expanse2.c \
+				lexer/expanse.c \
+				lexer/misc_exp.c \
 				AST/ast_tools.c \
 				AST/creat_ast.c \
 				AST/creat_io_seq.c \
diff --git a/err b/err
new file mode 100644
index 0000000..2ca5cc8
--- /dev/null
+++ b/err
@@ -0,0 +1,2 @@
+
+$> [1mBye[0m
diff --git a/includes/command_line.h b/includes/command_line.h
index 23cd374..a21f5d2 100644
--- a/includes/command_line.h
+++ b/includes/command_line.h
@@ -6,7 +6,7 @@
 /*   By: khabbar <khabbar@student.42.fr>            +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2017/08/31 17:03:41 by khabbar           #+#    #+#             */
-/*   Updated: 2017/10/15 16:25:25 by khabbar          ###   ########.fr       */
+/*   Updated: 2017/10/11 11:51:11 by zadrien          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -227,16 +227,15 @@ int					search_history_print(t_cmdl *cmdl, char buf[]);
 */
 
 void				cmdl_signals(t_cmdl *cmdl);
-void				resize_win(t_cmdl *cmdl, int save);
-void				ccp_case(t_cmdl *cmdl, int save);
-void				handle_ctrlc(t_cmdl *cmdl);
+void 				resize_win(t_cmdl *cmdl, int save);
+void 				ccp_case(t_cmdl *cmdl, int save);
+void 				handle_ctrlc(t_cmdl *cmdl);
 
 /*
 **	Suppression
 */
 
 int					del(t_cmdl *cmdl);
-int					back_del(t_cmdl *cmdl);
 
 /*
 **	Ctrl, esc
@@ -297,8 +296,8 @@ int					bs(char *str, int i);
 **	Completion
 */
 
-int					only_space_comp(char *str);
-void 				fill_comp(t_comp **comp, char *name, int dir, int i);
+t_comp				*fill_comp(t_comp **comp, struct dirent *rdd, int param,
+					int i);
 char				*get_path(char **tmp);
 int					display_comp(t_cmdl *cmdl, t_comp **comp, int offset);
 int					completion(t_cmdl *cmdl);
@@ -322,7 +321,7 @@ void				restor_cursor_position(t_cmdl *cmdl, int up);
 void				print_comp(t_comp **comp);
 void				check_built_in(t_cmdl *cmdl, char *tmp);
 void				insert(t_comp **comp, t_comp *lnk, int i);
-void				escape_metha(char **str);
+void 				escape_metha(char **str);
 
 /*
 **	Bang
diff --git a/includes/exec.h b/includes/exec.h
index 0f298ba..268a349 100644
--- a/includes/exec.h
+++ b/includes/exec.h
@@ -6,7 +6,7 @@
 /*   By: zadrien <zadrien@student.42.fr>            +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2017/05/23 19:35:36 by zadrien           #+#    #+#             */
-/*   Updated: 2017/10/15 16:27:45 by khabbar          ###   ########.fr       */
+/*   Updated: 2017/10/11 14:34:21 by zadrien          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -135,7 +135,7 @@ void				deletevar(t_env **tmp, t_env *prev);
 void				freenode(t_env *node);
 t_env				*lst_at(t_env **env, char *cmp);
 int					ft_cd(t_ast **ast, t_env **env);
-int					just_norme(struct stat *st, t_ast *tmp, char **path,
+int 				just_norme(struct stat *st, t_ast *tmp, char **path,
 	int opt);
 void				mod_env(t_env **env, char *path, char *save);
 char				*construct_path(t_env **env, char *save, char *path);
diff --git a/includes/job_control.h b/includes/job_control.h
index 98c477d..29c3c7e 100644
--- a/includes/job_control.h
+++ b/includes/job_control.h
@@ -6,7 +6,7 @@
 /*   By: nbouchin <nbouchin@student.42.fr>          +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2017/09/12 16:47:48 by nbouchin          #+#    #+#             */
-/*   Updated: 2017/10/14 23:38:06 by zadrien          ###   ########.fr       */
+/*   Updated: 2017/10/15 14:43:12 by zadrien          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -43,7 +43,6 @@ typedef struct			s_job
 {
 	int					status;
 	int					num;
-	int					bg;
 	char				*command;
 	struct s_process	*first_process;
 	pid_t				pgid;
diff --git a/includes/lexer_parser.h b/includes/lexer_parser.h
index b66d7ba..6baee48 100644
--- a/includes/lexer_parser.h
+++ b/includes/lexer_parser.h
@@ -6,7 +6,7 @@
 /*   By: zadrien <zadrien@student.42.fr>            +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2017/05/23 19:32:03 by zadrien           #+#    #+#             */
-/*   Updated: 2017/10/13 22:27:34 by zadrien          ###   ########.fr       */
+/*   Updated: 2017/10/15 18:28:45 by zadrien          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -109,8 +109,13 @@ int					print_error_lexer(t_tok **lst, t_tok **n, int mod);
 void				backslash(t_tok **lst, char **stack, char *line, int *i);
 void				complete_quote(char **stack, char *line, int *i,
 					char quote);
-int					stack_expanse(char **str);
 void				complete(char **stack, char *line, int *i);
 void				stuck_quote(char **stack, char *line, int *i);
-// void				stuck_quote(char **stack, char *line, int *i);
+void				expanse_stack(char **stack, char *line, int *i);
+void				after_quote(char **stack, char *line, int *i);
+void				lexer_exp(t_tok **lst, char **stack, char *line, int *i);
+void				in_quote(char **stack, char *line, int *i, int type);
+t_local				*find_local(t_local **local, char *var);
+void				tild(t_tok **lst, char **stack, char *line, int *i);
+void				complete_st_quote(char **stack, char **ins, char **str);
 #endif
diff --git a/libft/printf/fd_printf.c b/libft/printf/fd_printf.c
index e90d7be..15a8d2a 100644
--- a/libft/printf/fd_printf.c
+++ b/libft/printf/fd_printf.c
@@ -6,7 +6,7 @@
 /*   By: khabbar <marvin@42.fr>                     +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2017/03/10 09:35:04 by khabbar           #+#    #+#             */
-/*   Updated: 2017/10/15 18:50:35 by khabbar          ###   ########.fr       */
+/*   Updated: 2017/03/15 18:45:57 by khabbar          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -44,7 +44,7 @@ int				fd_printf(int fd, const char *restrict format, ...)
 	while (b.buff[++i])
 		if (b.buff[i] == -1)
 			b.buff[i] = '\0';
-	write(fd, b.buff, len);
+	write(1, b.buff, len);
 	va_end(ap);
 	return (b.len);
 }
diff --git a/srcs/builtins/export.c b/srcs/builtins/export.c
index ea52772..4a57f88 100644
--- a/srcs/builtins/export.c
+++ b/srcs/builtins/export.c
@@ -82,11 +82,6 @@ int			ft_export(t_ast **ast, t_env **env)
 	tmp = (*ast)->left->right;
 	while (tmp)
 	{
-		if (!ft_isalpha(tmp->str[0]))
-		{
-			return (fd_printf(2, "42sh: %s: not a valid identifier\n",
-			tmp->str));
-		}
 		if (ft_strchr(tmp->str, '='))
 		{
 			export_to_env(env, ft_strdup(tmp->str));
diff --git a/srcs/command_line/bang.c b/srcs/command_line/bang.c
index e7c987d..6a917aa 100644
--- a/srcs/command_line/bang.c
+++ b/srcs/command_line/bang.c
@@ -14,8 +14,7 @@
 
 static int		qsub_error(t_bang *bang, char **qsub)
 {
-	fd_printf(2, "\n42sh: ^%s^%s: substitution failed", bang->s1, bang->s2 ?
-	bang->s2 : "");
+	fd_printf(2, "\n42sh: ^%s^%s: substitution failed", bang->s1, bang->s2);
 	ft_free(qsub, &bang->tmp, 3);
 	ft_strdel(&bang->s1);
 	ft_strdel(&bang->s2);
@@ -28,6 +27,8 @@ static void		quick_sub(t_bang *bang, char **cmd, int len_cmd, int len_sub)
 	int				j;
 
 	qsub = ft_strsplit(bang->tmp, ' ');
+	if ((!bang->s1 || !bang->s2) && qsub_error(bang, qsub))
+		return ;
 	j = -1;
 	ft_memset((*cmd), 0, len_cmd);
 	while (qsub[++j] && ft_strcmp(bang->s1, qsub[j]))
@@ -37,7 +38,7 @@ static void		quick_sub(t_bang *bang, char **cmd, int len_cmd, int len_sub)
 	ft_strdel(&qsub[j]);
 	qsub[j] = bang->s2;
 	j = -1;
-	while (qsub[++j])
+	while (qsub[j])
 		len_sub += ft_strlen(qsub[j]);
 	while (len_sub > (*cmdl_slg())->line.len)
 		remalloc_cmdl(&(*cmdl_slg())->line);
@@ -94,7 +95,7 @@ static char		*get_bang(int *i, char *cmd, t_bang *bang)
 	while (cmd[++(*i)] && cmd[(*i)] != '<' && cmd[(*i)] != '>' &&
 	cmd[(*i)] != '"' && cmd[(*i)] != '\'' && cmd[(*i)] != ';' &&
 	cmd[(*i)] != '|' && cmd[(*i)] != '&' && cmd[(*i)] != '!' && cmd[(*i)] != '*'
-	&& cmd[(*i)] != '$')
+	&& cmd[(*i)] != '^' && cmd[(*i)] != '$')
 		;
 	end = *i;
 	bang->end = *i;
diff --git a/srcs/command_line/bang_parse.c b/srcs/command_line/bang_parse.c
index 573dd4b..5c43ab5 100644
--- a/srcs/command_line/bang_parse.c
+++ b/srcs/command_line/bang_parse.c
@@ -76,30 +76,29 @@ static int	ft_nbr_words(char const *s, char c)
 	return (nbr);
 }
 
-static int	get_event(char *cmdl, t_bang *bang)
+static int	get_event(char *event, t_bang *bang)
 {
 	char	**qsub;
 
-	if (cmdl[0] >= '0' && cmdl[0] <= '9')
-		bang->n = ft_atoi(cmdl);
-	else if (cmdl[0] == '-' && cmdl[1] && cmdl[1] >= '0' && cmdl[1] <= '9')
-		bang->n = -(ft_atoi(cmdl + 1));
-	else if (cmdl[0] == '!')
+	if (event[0] >= '0' && event[0] <= '9')
+		bang->n = ft_atoi(event);
+	else if (event[0] == '-' && event[1] && event[1] >= '0' && event[1] <= '9')
+		bang->n = -(ft_atoi(event + 1));
+	else if (event[0] == '!')
 		bang->n = -1;
-	else if (cmdl[0] == '?' && (bang->qm = 1))
-		bang->string = cmdl + 1;
-	else if (cmdl[0] == '^')
+	else if (event[0] == '?' && (bang->qm = 1))
+		bang->string = event + 1;
+	else if (event[0] == '^')
 	{
-		if ((qsub = ft_strsplit(cmdl, '^')) && !qsub[0])
-			return (fd_printf(2, "\n42sh: %s: no previous substitution", cmdl));
-		bang->s1 = ft_strdups(qsub[0], &bang->s1);
+		qsub = ft_strsplit(event, '^');
+		bang->s1 = qsub[0] ? ft_strdups(qsub[0], &bang->s1) : NULL;
 		bang->s2 = qsub[1] ? ft_strdups(qsub[1], &bang->s2) : NULL;
 		ft_free(qsub, NULL, 1);
 	}
-	else if (ft_isalpha(cmdl[0]))
-		bang->string = cmdl;
+	else if (ft_isalpha(event[0]))
+		bang->string = event;
 	else
-		return (fd_printf(2, "\n42sh: !%s: event not found", cmdl));
+		return (fd_printf(2, "\n42sh: !%s: event not found", event));
 	return (0);
 }
 
@@ -108,6 +107,7 @@ int			bang_parse(char *sub, t_bang *bang)
 	t_his		*his;
 	char		**opt;
 
+	ft_putendl(sub);
 	opt = ft_strsplit(sub, ':');
 	if (!(his = (*his_slg())->n))
 		return (bang_error(sub, opt));
@@ -126,7 +126,7 @@ int			bang_parse(char *sub, t_bang *bang)
 	(opt[1][0] != '$' && opt[1][0] != '*' && opt[1][0] != '-' && opt[1][0] !=
 	'^' && get_modifiers(opt[1], bang))))
 		return (ft_free(opt, &bang->tmp, 3));
-	if (sub[0] != '^' && bang_sub(bang))
+	if (bang_sub(bang))
 		return (ft_free(opt, &sub, 2));
 	ft_free(opt, &sub, 3);
 	return (0);
diff --git a/srcs/command_line/completion.c b/srcs/command_line/completion.c
index 9e7e072..886183c 100644
--- a/srcs/command_line/completion.c
+++ b/srcs/command_line/completion.c
@@ -24,7 +24,8 @@ static int		list_exec(t_cmdl *cmdl, char *tmp, char *arr_path[])
 		while ((rdd = readdir(dir)) != 0)
 			if (ft_strncmp(rdd->d_name, tmp, ft_strlen(tmp)) == 0 &&
 			!check_comp(&cmdl->comp, rdd->d_name))
-				fill_comp(&cmdl->comp, rdd->d_name, 0, 0);
+				!cmdl->comp ? cmdl->comp = fill_comp(&cmdl->comp, rdd, 2, 0) :
+				fill_comp(&cmdl->comp, rdd, 2, 0);
 		closedir(dir);
 	}
 	check_built_in(cmdl, tmp);
@@ -51,7 +52,8 @@ static void		list_files(t_cmdl *cmdl, char **tmp)
 		if (!(*tmp) || (ft_strncmp(rdd->d_name, (*tmp), ft_strlen(*tmp)) == 0
 		&& ft_strcmp(rdd->d_name, ".") && ft_strcmp(rdd->d_name, "..")))
 			if (rdd->d_name[0] != '.' || ft_strlen((*tmp)))
-				fill_comp(&cmdl->comp, rdd->d_name, rdd->d_type, 0);
+				!cmdl->comp ? cmdl->comp = fill_comp(&cmdl->comp, rdd, 2, 0) :
+				fill_comp(&cmdl->comp, rdd, 2, 0);
 	closedir(dir);
 	ft_strdel(&path);
 	if (cmdl->comp && (cmdl->comp->bol = 1))
@@ -60,31 +62,6 @@ static void		list_files(t_cmdl *cmdl, char **tmp)
 		write(2, "\7", 1);
 }
 
-static void		list_locale(t_cmdl *cmdl, char **tmp)
-{
-	t_local		*loc;
-	t_env		*env;
-
-	loc = *local_slg(0);
-	env = cmdl->lstenv;
-	while (loc)
-	{
-		if (!ft_strncmp(loc->var, (*tmp) + 1, ft_strlen((*tmp) + 1)))
-			fill_comp(&cmdl->comp, loc->var, 0, 0);
-		loc = loc->n;
-	}
-	while (env)
-	{
-		if (!ft_strncmp(env->var, (*tmp) + 1, ft_strlen((*tmp) + 1)))
-			fill_comp(&cmdl->comp, env->var, 0, 0);
-		env = env->next;
-	}
-	if (cmdl->comp && (cmdl->comp->bol = 1))
-		display_comp(cmdl, &cmdl->comp, ft_strlen((*tmp) + 1));
-	else
-		write(2, "\7", 1);
-}
-
 static void		get_comp(t_cmdl *cmdl, int i)
 {
 	char	*tmp;
@@ -106,15 +83,23 @@ static void		get_comp(t_cmdl *cmdl, int i)
 	if (tmp && tmp[0] == '~' && tmp[1] == '/' && lst_at(&cmdl->lstenv, "HOME"))
 		tmp = ft_strjoinf(lst_at(&cmdl->lstenv, "HOME")->value,
 		ft_strdups(tmp + 1, &tmp), 2);
-	if (tmp && tmp[0] == '$')
-		list_locale(cmdl, &tmp);
-	else if (tmp && is_exec(cmdl))
+	if (tmp && is_exec(cmdl))
 		list_exec(cmdl, tmp, path) ? 0 : list_files(cmdl, &tmp);
 	else
 		list_files(cmdl, &tmp);
 	ft_free(path, tmp ? &tmp : NULL, tmp ? 3 : 1);
 }
 
+static int		only_space_comp(char *str)
+{
+	while (*str)
+		if (*(++str) != ' ')
+			return (0);
+	write(2, "\033[1mRTFM\033[0m\n", 13);
+	print_prompt();
+	return (write(2, "\7", 1));
+}
+
 int				completion(t_cmdl *cmdl)
 {
 	int		i;
diff --git a/srcs/command_line/completion_edit.c b/srcs/command_line/completion_edit.c
index 1f54b26..0021a86 100644
--- a/srcs/command_line/completion_edit.c
+++ b/srcs/command_line/completion_edit.c
@@ -12,16 +12,6 @@
 
 #include "header.h"
 
-int				only_space_comp(char *str)
-{
-	while (*str)
-		if (*(++str) != ' ')
-			return (0);
-	write(2, "\033[1mRTFM\033[0m\n", 13);
-	print_prompt();
-	return (write(2, "\7", 1));
-}
-
 void			comp_del(t_comp **head)
 {
 	t_comp		*tmp;
@@ -38,6 +28,32 @@ void			comp_del(t_comp **head)
 	*head = NULL;
 }
 
+static t_comp	*fill_builtin(t_comp **comp, const char *builin)
+{
+	t_comp	*tmp;
+	t_comp	*stock;
+	int		i;
+
+	i = 0;
+	if (!(tmp = (t_comp *)malloc(sizeof(t_comp))))
+		exit(EXIT_FAILURE);
+	tmp->str = ft_strdup(builin);
+	ft_memset(tmp->pad, 0, 512);
+	tmp->bol = 0;
+	tmp->n = NULL;
+	tmp->p = NULL;
+	if (!(*comp))
+		return (tmp);
+	stock = *comp;
+	while (stock && ft_strcmp(stock->str, builin) < 0)
+	{
+		i++;
+		stock = stock->n;
+	}
+	insert(comp, tmp, i);
+	return (tmp);
+}
+
 void			check_built_in(t_cmdl *cmdl, char *tmp)
 {
 	const char	*builtin[5] = {"setenv", "unsetenv", "history", "hash", "env"};
@@ -45,8 +61,11 @@ void			check_built_in(t_cmdl *cmdl, char *tmp)
 
 	i = -1;
 	while (++i < 5)
+	{
 		if (ft_strncmp(builtin[i], tmp, ft_strlen(tmp)) == 0)
-			fill_comp(&cmdl->comp, (char *)builtin[i], 0, 0);
+			!cmdl->comp ? cmdl->comp = fill_builtin(&cmdl->comp, builtin[i]) :
+			fill_builtin(&cmdl->comp, builtin[i]);
+	}
 }
 
 void			completion_edit(t_line *line, t_comp **comp, char *tmp,
diff --git a/srcs/command_line/completion_func.c b/srcs/command_line/completion_func.c
index 2763f90..d792fc8 100644
--- a/srcs/command_line/completion_func.c
+++ b/srcs/command_line/completion_func.c
@@ -12,7 +12,7 @@
 
 #include "header.h"
 
-void		insert(t_comp **comp, t_comp *new, int i)
+void		insert(t_comp **comp, t_comp *lnk, int i)
 {
 	t_comp	*tmp;
 	t_comp	*save;
@@ -20,81 +20,52 @@ void		insert(t_comp **comp, t_comp *new, int i)
 	tmp = *comp;
 	if (!i)
 	{
-		new->n = tmp;
-		new->p = NULL;
-		tmp->p = new;
-		*comp = new;
+		lnk->n = tmp;
+		lnk->p = NULL;
+		tmp->p = lnk;
+		*comp = lnk;
 	}
 	else
 	{
 		while (i-- > 1)
 			tmp = tmp->n;
 		save = tmp->n;
-		tmp->n = new;
-		new->n = save;
-		new->p = tmp;
-		save ? save->p = new : 0;
+		tmp->n = lnk;
+		lnk->n = save;
+		lnk->p = tmp;
+		save ? save->p = lnk : 0;
 	}
 }
 
-void 		fill_comp(t_comp **comp, char *name, int dir, int i)
+t_comp		*fill_comp(t_comp **comp, struct dirent *rdd, int param, int i)
 {
 	t_comp	*tmp;
-	t_comp	*save;
+	t_comp	*stock;
 
-	if (!(tmp = *comp))
+	if (!(tmp = (t_comp *)malloc(sizeof(t_comp))))
 	{
-		if (!((*comp) = (t_comp *)malloc(sizeof(t_comp))))
-			exit(EXIT_FAILURE);
-		ft_memset(*comp, 0, sizeof(t_comp));
-		(*comp)->str = (dir == 4 ? ft_strjoin(name, "/") : ft_strdup(name));
-		escape_metha(&(*comp)->str);
-		return ;
+		del_all(cmdl_slg(), his_slg(), local_slg(0));
+		exit(EXIT_FAILURE);
 	}
-	else
-		if (!(tmp = (t_comp *)malloc(sizeof(t_comp))))
-			exit(EXIT_FAILURE);
-	ft_memset(tmp, 0, sizeof(t_comp));
-	tmp->str = (dir == 4 ? ft_strjoin(name, "/") : ft_strdup(name));
+	tmp->str = (param == 2 && rdd->d_type == 4 ? ft_strjoin(rdd->d_name, "/") :
+	ft_strdup(rdd->d_name));
 	escape_metha(&tmp->str);
-	save = *comp;
-	while (save && ft_strcmp(save->str, name) < 0)
+	ft_memset(tmp->pad, 0, 512);
+	tmp->bol = 0;
+	tmp->n = NULL;
+	tmp->p = NULL;
+	if (!(*comp))
+		return (tmp);
+	stock = *comp;
+	while (stock && ft_strcmp(stock->str, rdd->d_name) < 0)
 	{
 		i++;
-		save = save->n;
+		stock = stock->n;
 	}
 	insert(comp, tmp, i);
+	return (tmp);
 }
 
-// t_comp		*fill_comp(t_comp **comp, struct dirent *rdd, int param, int i)
-// {
-// 	t_comp	*tmp;
-// 	t_comp	*stock;
-//
-// 	if (!(tmp = (t_comp *)malloc(sizeof(t_comp))))
-// 	{
-// 		del_all(cmdl_slg(), his_slg(), local_slg(0));
-// 		exit(EXIT_FAILURE);
-// 	}
-// 	tmp->str = (param == 2 && rdd->d_type == 4 ? ft_strjoin(rdd->d_name, "/") :
-// 	ft_strdup(rdd->d_name));
-// 	escape_metha(&tmp->str);
-// 	ft_memset(tmp->pad, 0, 512);
-// 	tmp->bol = 0;
-// 	tmp->n = NULL;
-// 	tmp->p = NULL;
-// 	if (!(*comp))
-// 		return (tmp);
-// 	stock = *comp;
-// 	while (stock && ft_strcmp(stock->str, rdd->d_name) < 0)
-// 	{
-// 		i++;
-// 		stock = stock->n;
-// 	}
-// 	insert(comp, tmp, i);
-// 	return (tmp);
-// }
-
 int			is_exec(t_cmdl *cmdl)
 {
 	int		pos;
diff --git a/srcs/command_line/delete.c b/srcs/command_line/delete.c
index 2c734fe..dfc9ce9 100644
--- a/srcs/command_line/delete.c
+++ b/srcs/command_line/delete.c
@@ -49,31 +49,6 @@ static int		delete_comp_lst(t_cmdl *cmdl)
 	return (1);
 }
 
-int				back_del(t_cmdl *cmdl)
-{
-	int		i;
-
-	i = cmdl->line.cur - cmdl->line.pr;
-	if (cmdl->opt & CCOMP)
-		return (delete_comp_lst(cmdl));
-	if (cmdl->opt & (CCMODE | CHIS_S) || i == (int)ft_strlen(cmdl->line.str))
-		return (write(2, "\7", 1));
-	cmdl->ccp.start -= cmdl->ccp.start == -1 ? 0 : 1;
-	tputs(tgetstr("cd", NULL), 1, ft_putchar);
-	while (cmdl->line.str[i])
-	{
-		cmdl->line.str[i] = cmdl->line.str[i + 1];
-		i++;
-	}
-	tputs(tgetstr("sc", NULL), 1, ft_putchar);
-	cmdl->ccp.start != -1 ? tputs(tgetstr("mr", NULL), 1, ft_putchar) : 0;
-	write(1, cmdl->line.str + (cmdl->line.cur - cmdl->line.pr),
-			ft_strlen(cmdl->line.str + (cmdl->line.cur - cmdl->line.pr)));
-	tputs(tgetstr("me", NULL), 1, ft_putchar);
-	tputs(tgetstr("rc", NULL), 1, ft_putchar);
-	return (1);
-}
-
 int				del(t_cmdl *cmdl)
 {
 	int		i;
diff --git a/srcs/command_line/get_cmdl.c b/srcs/command_line/get_cmdl.c
index c5e3779..f9fabbc 100644
--- a/srcs/command_line/get_cmdl.c
+++ b/srcs/command_line/get_cmdl.c
@@ -33,7 +33,7 @@ static void	exit_cmdl(t_cmdl *cmdl)
 
 void		get_op(t_cmdl *cmdl, int *ret, int *i)
 {
-	static const	t_op		op[24] = {{{-61, -89, 0, 0}, &ccp},
+	static const	t_op		op[23] = {{{-61, -89, 0, 0}, &ccp},
 	{{-30, -120, -102, 0}, &ccp}, {{-30, -119, -120, 0}, &ccp},
 	{{27, 91, 68, 0}, &arrow_left}, {{27, 91, 67, 0}, &arrow_right},
 	{{27, 91, 72, 0}, &home}, {{27, 91, 70, 0}, &end},
@@ -43,15 +43,13 @@ void		get_op(t_cmdl *cmdl, int *ret, int *i)
 	{{10, 0, 0, 0}, &return_cmdl}, {{127, 0, 0, 0}, &del},
 	{{18, 0, 0, 0}, &cmd_search_history}, {{14, 0, 0, 0}, &cmd_search_history},
 	{{9, 0, 0, 0}, &completion}, {{1, 0, 0, 0}, &home}, {{5, 0, 0, 0}, &end},
-	{{21, 0, 0, 0}, &ctrl_u}, {{20, 0, 0, 0}, &ctrlt}, {{27, 0, 0, 0}, &esc},
-	{{27, 91, 51, 126}, &back_del}};
+	{{21, 0, 0, 0}, &ctrl_u}, {{20, 0, 0, 0}, &ctrlt}, {{27, 0, 0, 0}, &esc}};
 
 	*ret = -1;
 	*i = -1;
 	ft_memset(cmdl->line.buf, '\0', 6);
 	read(0, cmdl->line.buf, 6);
-	// ft_printf("%d %d %d %d\n", cmdl->line.buf[0], cmdl->line.buf[1], cmdl->line.buf[2], cmdl->line.buf[3]);
-	while (++(*i) < 24)
+	while (++(*i) < 23)
 		if (cmdl->line.buf[0] == op[(*i)].key[0] &&
 		cmdl->line.buf[1] == op[(*i)].key[1]
 		&& cmdl->line.buf[2] == op[(*i)].key[2] &&
@@ -82,7 +80,7 @@ void		get_cmdl(t_cmdl *cmdl)
 			if (ctrl_d(cmdl))
 				return ;
 		}
-		else if (i == 24)
+		else if (i == 23)
 			print(cmdl, cmdl->line.buf);
 	}
 	exit_cmdl(cmdl);
diff --git a/srcs/command_line/inhibiteur.c b/srcs/command_line/inhibiteur.c
index 92f8cc2..2212021 100644
--- a/srcs/command_line/inhibiteur.c
+++ b/srcs/command_line/inhibiteur.c
@@ -17,7 +17,7 @@ int		inhibiteur(t_cmdl *cmdl, int len)
 	int		count;
 
 	count = 0;
-	while (len >= 0 && cmdl->line.str[len] == '\\')
+	while (cmdl->line.str[len] == '\\' && len >= 0)
 	{
 		count++;
 		len--;
diff --git a/srcs/command_line/pipe_and_or.c b/srcs/command_line/pipe_and_or.c
index 12c9ffd..6c56f13 100644
--- a/srcs/command_line/pipe_and_or.c
+++ b/srcs/command_line/pipe_and_or.c
@@ -41,7 +41,7 @@ static int	check(t_cmdl *cmdl, int i)
 	return (1);
 }
 
-static int	check_inhib(char *str, int *i, int mode)
+static void	check_inhib(char *str, int *i)
 {
 	int		j;
 	int		count;
@@ -50,11 +50,8 @@ static int	check_inhib(char *str, int *i, int mode)
 	count = 0;
 	while (str[--j] == '\\')
 		count++;
-	if (!mode && count % 2)
+	if (count % 2)
 		(*i)++;
-	else if (mode && count % 2)
-		return (0);
-	return (1);
 }
 
 static int	look_for_rd(char *str, int i)
@@ -72,10 +69,10 @@ static int	look_for_rd(char *str, int i)
 			continue ;
 		}
 		if (str[tmp] != ' ' && str[tmp] != '|' && str[tmp] != '&'
-		&& str[tmp] != '<' && str[tmp] != '>' && str[tmp] != ';')
+		&& str[tmp] != '<' && str[tmp] != '>')
 			return (0);
-		if ((str[tmp] == '|' || str[tmp] == '&' || str[tmp] == '<' ||
-		str[tmp] == '>' || str[tmp] == ';') && check_inhib(str, &tmp, 1))
+		if (str[tmp] == '|' || str[tmp] == '&' || str[tmp] == '<' ||
+		str[tmp] == '>')
 			break ;
 	}
 	fd_printf(2, "\n42sh: syntax error near unexpected token `%c%c'",
@@ -107,7 +104,7 @@ int			handle_pipe_and_or(t_cmdl *cmdl)
 		i--;
 	}
 	if ((cmdl->line.str[i] != '|' && cmdl->line.str[i] != '&') ||
-	check_spacing(cmdl->line.str, i))
+	check_spacing(cmdl->line.str + i, -1))
 		return ((cmdl->opt &= ~(CPIPE | CAND | COR)));
 	i -= i && cmdl->line.str[i] == cmdl->line.str[i - 1] ? 1 : 0;
 	if (look_for_rd(cmdl->line.str, i))
@@ -116,6 +113,6 @@ int			handle_pipe_and_or(t_cmdl *cmdl)
 		(i && cmdl->line.str[i] == cmdl->line.str[i + 1] ? 2 : 1)), i))
 		return (0);
 	if (i && cmdl->line.str[i - 1] == '\\')
-		check_inhib(cmdl->line.str, &i, 0);
+		check_inhib(cmdl->line.str, &i);
 	return (check(cmdl, i));
 }
diff --git a/srcs/job_control/ast_base.c b/srcs/job_control/ast_base.c
index 18f0dce..140f4ff 100644
--- a/srcs/job_control/ast_base.c
+++ b/srcs/job_control/ast_base.c
@@ -6,7 +6,7 @@
 /*   By: zadrien <zadrien@student.42.fr>            +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2017/10/01 21:12:24 by zadrien           #+#    #+#             */
-/*   Updated: 2017/10/14 23:42:08 by zadrien          ###   ########.fr       */
+/*   Updated: 2017/10/15 14:43:14 by zadrien          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -81,7 +81,6 @@ int		exec_job(t_job **job, t_env **env, int fg)
 	int		status;
 
 	job_control(job, NULL, ADD);
-	(*job)->bg = fg ? 0 : 1;
 	if (fg)
 	{
 		status = exec_pro(&(*job)->first_process, env, job);
diff --git a/srcs/job_control/creat_job.c b/srcs/job_control/creat_job.c
index 748c0c2..72c9c32 100644
--- a/srcs/job_control/creat_job.c
+++ b/srcs/job_control/creat_job.c
@@ -6,7 +6,7 @@
 /*   By: zadrien <zadrien@student.42.fr>            +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2017/10/02 00:19:40 by zadrien           #+#    #+#             */
-/*   Updated: 2017/10/14 23:42:23 by zadrien          ###   ########.fr       */
+/*   Updated: 2017/10/15 14:45:54 by zadrien          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -18,7 +18,6 @@ int		init_job(t_job **job)
 		return (-1);
 	(*job)->status = 0;
 	(*job)->num = 0;
-	(*job)->bg = 0;
 	(*job)->command = NULL;
 	(*job)->pgid = 0;
 	(*job)->first_process = NULL;
diff --git a/srcs/job_control/fork_bg.c b/srcs/job_control/fork_bg.c
index 94465da..e60fd14 100644
--- a/srcs/job_control/fork_bg.c
+++ b/srcs/job_control/fork_bg.c
@@ -6,7 +6,7 @@
 /*   By: zadrien <zadrien@student.42.fr>            +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2017/10/14 23:01:51 by zadrien           #+#    #+#             */
-/*   Updated: 2017/10/15 00:32:00 by zadrien          ###   ########.fr       */
+/*   Updated: 2017/10/15 14:47:19 by zadrien          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -29,8 +29,8 @@ int		exec_pro_bg(t_process **pro, t_env **env, t_job **job)
 		fd_printf(2, "[%d] %d\n", (*job)->num, p->pid);
 		(*job)->pgid = p->pid;
 		if (kill (- p->pid, SIGCONT) < 0)
-			fd_printf(2, "[%d] Done     \n", 0);
-		// fd_printf(2, "[%d] Done     %s\n", (*job)->num, (*job)->command);
+			fd_printf(2, "[%d] Done     %s\n", (*job)->num, (*job)->command);
+			// fd_printf(2, "[%d] Done     \n", 0);
 		set_pid(p->pid, &(*job)->pgid, 0);
 	}
 	ft_freetab(n_env);
@@ -83,7 +83,6 @@ int		main_fork_bg(t_job **lst, char **env)
 	int		ret;
 
 	status = 0;
-	(*lst)->bg = 1;
 	if (!((*lst)->pgid = fork()))
 	{
 		active_sig(getpid(), getpid(), 0);
@@ -97,6 +96,8 @@ int		main_fork_bg(t_job **lst, char **env)
 	{
 		fd_printf(2, "[%d] %d\n", (*lst)->num, (*lst)->pgid);
 		set_pgid((*lst)->pgid, &(*lst)->pgid, 0);
+		if (kill (-(*lst)->pgid, SIGCONT) < 0)
+			fd_printf(2, "[%d] Done     %s\n", (*lst)->num, (*lst)->command);
 	}
 	return (status);
 }
diff --git a/srcs/job_control/fork_fg.c b/srcs/job_control/fork_fg.c
index 0b85175..2c3bbf6 100644
--- a/srcs/job_control/fork_fg.c
+++ b/srcs/job_control/fork_fg.c
@@ -6,7 +6,7 @@
 /*   By: zadrien <zadrien@student.42.fr>            +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2017/10/01 21:46:33 by zadrien           #+#    #+#             */
-/*   Updated: 2017/10/14 23:38:59 by zadrien          ###   ########.fr       */
+/*   Updated: 2017/10/15 19:55:09 by zadrien          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -46,6 +46,11 @@ int		cont_pipe_fg(t_process **lst, char **env, pid_t main, int *p)
 	return (status);
 }
 
+void	kill_pid(int sig)
+{
+	while(1)
+		ft_putnbrl(sig);
+}
 int		pipe_job_fg(t_process **lst, char **env, int r, pid_t main)
 {
 	int			p[2];
@@ -75,17 +80,30 @@ int		pipe_job_fg(t_process **lst, char **env, int r, pid_t main)
 	return (status != 0 ? status : tmp->status);
 }
 
+void	sig_ign(pid_t pid, int fg)
+{
+	if (fg)
+		tcsetpgrp(g_shell_terminal, pid);
+	signal(SIGTSTP, &kill_pid);
+	signal(SIGCHLD, &kill_pid);
+	signal(SIGINT, &kill_pid);
+	signal(SIGQUIT, &kill_pid);
+	signal(SIGTTIN, &kill_pid);
+	signal(SIGTTOU, &kill_pid);
+}
 
+void	sig_ign(pid_t pid, int fg);
 int		main_fork_fg(t_job **lst, char **env)
 {
 	int		status;
 	int		ret;
 
 	status = 0;
-	(*lst)->bg = 0;
 	if (!((*lst)->pgid = fork()))
 	{
-		active_sig(getpid(), getpid(), 1);
+		// active_sig(getpid(), getpid(), 1);
+		sig_ign(getpid(), 1);
+		// signal(SIGINT, SIG_IGN);
 		ret = pipe_job_fg(&(*lst)->first_process, env, -1, (*lst)->pgid);
 		if (!return_exec(ret))
 			exit(EXIT_FAILURE);
@@ -94,10 +112,10 @@ int		main_fork_fg(t_job **lst, char **env)
 	else
 	{
 		set_pgid((*lst)->pgid, &(*lst)->pgid, 1);
-		waitpid((*lst)->pgid, &status, WCONTINUED | WUNTRACED);
+		waitpid((*lst)->pgid, &status, WCONTINUED);// | WUNTRACED);
 		(*lst)->status = status;
 		catch_error(lst, (*lst)->status);
 		tcsetpgrp(g_shell_terminal, g_shell_pgid);
 	}
 	return (status);
-}
+} // GO i
diff --git a/srcs/job_control/fork_utils.c b/srcs/job_control/fork_utils.c
index 573b916..1d9d40c 100644
--- a/srcs/job_control/fork_utils.c
+++ b/srcs/job_control/fork_utils.c
@@ -6,7 +6,7 @@
 /*   By: zadrien <zadrien@student.42.fr>            +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2017/10/01 22:06:27 by zadrien           #+#    #+#             */
-/*   Updated: 2017/10/14 16:59:37 by zadrien          ###   ########.fr       */
+/*   Updated: 2017/10/15 19:55:18 by zadrien          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -16,8 +16,7 @@ void	set_pgid(pid_t pid, pid_t *pgid, int foreground)
 {
 	setpgid(pid, *pgid);
 	if (foreground)
-		tcsetpgrp(g_shell_terminal, pid);
-		// ;
+	tcsetpgrp(g_shell_terminal, pid);
 }
 
 void	set_pid(pid_t pid, pid_t *pgid, int foreground)
@@ -56,3 +55,15 @@ void	exec_fork(t_process **process, char **env, int r)
 		execve(p->argv[0], p->argv, env);
 	exit(EXIT_SUCCESS);
 }
+
+// void	sig_ign(pid_t pid, int fg)
+// {
+// 	if (fg)
+// 		tcsetpgrp(g_shell_terminal, pid);
+// 	signal(SIGTSTP, SIG_DFL);
+// 	signal(SIGCHLD, SIG_IGN);
+// 	signal(SIGINT, SIG_IGN);
+// 	signal(SIGQUIT, SIG_IGN);
+// 	signal(SIGTTIN, SIG_IGN);
+// 	signal(SIGTTOU, SIG_IGN);
+// }
diff --git a/srcs/job_control/job_control.c b/srcs/job_control/job_control.c
index e0ea302..4a727a2 100644
--- a/srcs/job_control/job_control.c
+++ b/srcs/job_control/job_control.c
@@ -6,7 +6,7 @@
 /*   By: zadrien <zadrien@student.42.fr>            +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2017/10/02 00:09:20 by zadrien           #+#    #+#             */
-/*   Updated: 2017/10/15 00:30:08 by zadrien          ###   ########.fr       */
+/*   Updated: 2017/10/15 14:44:21 by zadrien          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -66,19 +66,16 @@ int		check_job(t_job **job, t_ast **ast, t_job **table)
 		{
 			if (kill(j->pgid, 0) < 0)
 			{
-				if (j->bg)
- 					fd_printf(2, "[%d] Done     %s\n", j->num, j->command);
 				delete_tnode(&j, &prev, table);
-				if ((j = *table))
+				if (*table)
+				{
+					j = *table;
 					prev = NULL;
-				else
-					j = NULL;
+				}
 			}
 			else
-			{
 				prev = j;
-				j = j->next;
-			}
+			j = j->next;
 		}
 	}
 	return (1);
diff --git a/srcs/lexer/expanse.c b/srcs/lexer/expanse.c
index bc118bc..08eb518 100644
--- a/srcs/lexer/expanse.c
+++ b/srcs/lexer/expanse.c
@@ -5,128 +5,81 @@
 /*                                                    +:+ +:+         +:+     */
 /*   By: zadrien <zadrien@student.42.fr>            +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
-/*   Created: 2017/07/06 10:03:40 by zadrien           #+#    #+#             */
-/*   Updated: 2017/10/11 20:19:50 by zadrien          ###   ########.fr       */
+/*   Created: 2017/10/15 16:11:19 by zadrien           #+#    #+#             */
+/*   Updated: 2017/10/15 18:55:47 by zadrien          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
-#include "../../includes/header.h"
+#include "header.h"
 
-t_local			*find_local(t_local **local, char *var)
+void	find_var(char *var, char **stack)
 {
-	t_local		*tmp;
+	int		i;
+	t_local	*loc;
+	t_env	*env;
 
-	if (*local)
+	i = -1;
+	if ((loc = find_local(local_slg(0), var)))
 	{
-		tmp = *local;
-		while (tmp && ft_strcmp(var, tmp->var) != 0)
-			tmp = tmp->n;
-		return (tmp);
+		while (loc->val[++i])
+			st_tok(stack, loc->var[i], 0);
+	}
+	else if ((env = find_node(&(*cmdl_slg())->lstenv, var, NULL)))
+	{
+		while (env->value[++i])
+			st_tok(stack, env->value[i], 0);
 	}
-	return (NULL);
 }
 
-static char		*replace_env(char *str, int s, int len, t_env **env)
+void	expanse_stack(char **stack, char *line, int *i)
 {
-	char	*beg;
-	char	*end;
-	char	*var;
-	t_local	*tmp;
-	t_env	*var_env;
+	int		j;
+	char	*str;
 
-	ft_putendl("=========");
-	beg = ft_strndup(str, s);
-	ft_putendl(beg);
-	end = ft_strdup(str + (s + len));
-	ft_putendl(end);
-	var = ft_strsub(str, s + 1, len - 1);
-	ft_putendl(var);
-	ft_putendl("=========");
-	if (var && (var_env = find_node(env, var, NULL)))
-		beg = ft_strjoinf(beg, var_env->value, 1);
-	else if ((tmp = find_local(local_slg(0), var)))
-		beg = ft_strjoinf(beg, tmp->val, 1);
+	j = (*i) += 1;
+	if (line[j] == ' ' || line[j] == '\0' || line[j] == '\'' || line[j] == '"')
+		st_tok(stack, line[j - 1], 0);
 	else
 	{
-		ft_strdel(&beg);
-		ft_strdel(&end);
-		ft_strdel(&var);
-		return (NULL);
+		while (line[(*i)] && !is_space(line[(*i)]) &&
+				line[(*i)] != '"' && line[(*i)] != '\'')
+			(*i)++;
+		str = ft_strsub(line, j, (*i) - j);
+		find_var(str, stack);
+		ft_strdel(&str);
 	}
-	beg = ft_strjoinf(beg, end, 3);
-	free(var);
-	return (beg);
-} // a refaire
-
-static int		check_expanse(char **str, t_env **env, int i)
-{
-	int		end;
-	char	*tmp;
-
-	while ((*str)[i])
-		if ((*str)[i] == '$')
-		{
-			end = 0;
-			while ((*str)[i + end] && !is_space((*str)[i + end]))
-				end++;
-			if (!ft_strcmp("$", *str))
-				return (0);
-			if ((tmp = replace_env(*str, i, end, env)))
-			{
-				ft_strdel(str);
-				(*str = ft_strdup(tmp)) ? ft_strdel(&tmp) : 0;
-				i = 0;
-			}
-			else
-				return (1);
-		}
-		else
-			i++;
-	return (0);
 }
 
-static void		tild(char **str, t_env **env)
+void	in_quote(char **stack, char *line, int *i, int type)
 {
-	char	*tmp;
-	char	*tmp2;
-	t_env	*var_env;
-
-	if ((*str) && (*str)[0] == '~' && ((*str)[1] == '/' || (*str)[1] == '\0'))
-		if ((var_env = find_node(env, "HOME", NULL)) && var_env->value)
+	while (line[(*i)] && line[(*i)] != '\'' && line[(*i)] != '"')
+	{
+		if ((type & DQUOTE) && line[(*i)] == '\\')
 		{
-			tmp = ft_strdup((*str) + 1);
-			ft_strdel(str);
-			tmp2 = ft_strdup(var_env->value);
-			tmp2 = ft_strjoinf(tmp2, tmp, 3);
-			*str = ft_strdupf(&tmp2);
+			st_tok(stack, line[++(*i)], 0);
+			(*i)++;
 		}
+		else if ((type & DQUOTE) && line[(*i)] == '$')
+			expanse_stack(stack, line, i);
+		else
+			st_tok(stack, line[(*i)++], 0);
+	}
+	(*i)++;
 }
 
-void			expanse(t_tok **lst, t_env **env)
+void	after_quote(char **stack, char *line, int *i)
 {
-	t_tok	*tmp;
-	t_tok	*prev;
-	t_tok	*save;
-
-	tmp = *lst;
-	prev = NULL;
-	save = NULL;
-	while (tmp)
+	while (line[(*i)] && !is_space(line[(*i)]) &&
+			line[(*i)] != '"' && line[(*i)] != '\'')
 	{
-		if (tmp->type == DQUOTE || tmp->type == WORD)
+		if (line[(*i)] == '\\')
 		{
-			tmp->type == WORD ? tild(&tmp->str, env) : 0;
-			if (check_expanse(&tmp->str, env, 0))
-			{
-				save = tmp;
-				!prev ? *lst = tmp->n : 0;
-				prev ? prev->n = tmp->n : 0;
-			}
+			st_tok(stack, line[++(*i)], 0);
+			(*i)++;
 		}
-		prev = tmp;
-		tmp = tmp->n;
-		save ? ft_strdel(&save->str) : 0;
-		save ? free(save) : 0;
-		save ? save = NULL : 0;
+		else if (line[(*i)] == '$')
+			expanse_stack(stack, line, i);
+		else
+			st_tok(stack, line[(*i)++], 0);
 	}
 }
diff --git a/srcs/lexer/expanse2.c b/srcs/lexer/expanse2.c
deleted file mode 100644
index 7daec05..0000000
--- a/srcs/lexer/expanse2.c
+++ /dev/null
@@ -1,124 +0,0 @@
-/* ************************************************************************** */
-/*                                                                            */
-/*                                                        :::      ::::::::   */
-/*   expanse2.c                                         :+:      :+:    :+:   */
-/*                                                    +:+ +:+         +:+     */
-/*   By: zadrien <zadrien@student.42.fr>            +#+  +:+       +#+        */
-/*                                                +#+#+#+#+#+   +#+           */
-/*   Created: 2017/10/12 13:56:57 by zadrien           #+#    #+#             */
-/*   Updated: 2017/10/13 22:30:11 by zadrien          ###   ########.fr       */
-/*                                                                            */
-/* ************************************************************************** */
-
-#include "header.h"
-
-static int		replace_var(char **str, int *i, int var, char *val)
-{
-	char	*beg;
-	char	*end;
-
-	end = NULL;
-	if (*str + (*i) + var + 1)
-		end = ft_strdup(*str + (*i) + var + 1);
-	if ((*i) != 0)
-		beg = ft_strndup(*str, (*i));
-	else
-		beg = ft_strdup("");
-	ft_strdel(str);
-	if (val)
-	{
-		beg = ft_strjoinf(beg, val, 1);
-		*i = *i + ft_strlen(val);
-	}
-	if (end)
-		beg = ft_strjoinf(beg, end, 2);
-	*str = ft_strdupf(&beg);
-	return (0);
-}
-
-static int		find_loc(char **str, int *i, t_local **env)
-{
-	int		var;
-	t_local	*tmp;
-
-	if (*env)
-	{
-		tmp = *env;
-		while (tmp)
-		{
-			var = ft_strlen(tmp->var);
-			if (!ft_strncmp(*str + (*i + 1), tmp->var, var))
-				return (replace_var(str, i, ft_strlen(tmp->var), tmp->var));
-			else
-				tmp = tmp->n;
-		}
-	}
-	return (1);
-}
-
-static int		find_env(char **str, int *i, t_env **env)
-{
-	int		var;
-	t_env	*tmp;
-
-	if (*env)
-	{
-		tmp = *env;
-		while (tmp)
-		{
-			var = ft_strlen(tmp->var);
-			if (!ft_strncmp(*str + (*i + 1), tmp->var, var))
-				return (replace_var(str, i, var, tmp->value));
-			else
-				tmp = tmp->next;
-		}
-	}
-	return (1);
-}
-
-static void		remove_vari(char **str, int i)
-{
-	int		j;
-	char	*beg;
-	char	*end;
-
-	j = 0;
-	end = NULL;
-	while ((*str)[i + j] && !is_space((*str)[i + j]))
-		j++;
-	if (*str + i + j)
-		end = ft_strdup(*str + i + j);
-	beg = (i != 0 ? ft_strndup(*str, i) : ft_strdup(""));
-	ft_strdel(str);
-	end ? beg = ft_strjoinf(beg, end, 3) : 0;
-	*str = ft_strdupf(&beg);
-}
-
-int				stack_expanse(char **str)
-{
-	int		i;
-	char	*tmp;
-	t_local	*loc;
-	t_env	*env;
-
-	loc = *local_slg(0);
-	env = (*cmdl_slg())->lstenv;
-	if (!(*str))
-		return (1);
-	i = 0;
-	tmp = ft_strdup(*str);
-	ft_memset(*str, 0, ft_strlen(*str));
-	while (tmp[i])
-	{
-		if (tmp[i] == '$' && tmp[i + 1])
-			if (tmp[i + 1] && !is_space(tmp[i + 1]))
-				if (find_env(&tmp, &i, &env) && find_loc(&tmp, &i, &loc))
-					remove_vari(&tmp, i);
-		i++;
-	}
-	i = -1;
-	while (tmp[++i])
-		st_tok(str, tmp[i], 0);
-	ft_strdel(&tmp);
-	return (1);
-}
diff --git a/srcs/lexer/jonathan_kent.c b/srcs/lexer/jonathan_kent.c
index 5b8e309..46182ce 100644
--- a/srcs/lexer/jonathan_kent.c
+++ b/srcs/lexer/jonathan_kent.c
@@ -6,7 +6,7 @@
 /*   By: zadrien <zadrien@student.42.fr>            +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2017/05/05 14:40:06 by zadrien           #+#    #+#             */
-/*   Updated: 2017/10/13 22:29:50 by zadrien          ###   ########.fr       */
+/*   Updated: 2017/10/15 18:55:16 by zadrien          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -19,34 +19,20 @@ void	ft_quote(t_tok **lst, char **stack, char *line, int *i)
 
 	quote = line[(*i)++];
 	type = (quote == '\'' ? QUOTE : DQUOTE);
-	complete_quote(stack, line, i, quote);
-	while (line[(*i)] && !is_space(line[(*i)]) &&
+	in_quote(stack, line, i, type);
+	if (line[(*i)] && !is_space(line[(*i)]) &&
 			line[(*i)] != '"' && line[(*i)] != '\'')
-	{
-		if (quote == '"' && line[(*i)] == '\\')
-		{
-			st_tok(stack, line[++(*i)], 0);
-			(*i)++;
-		}
-		else
-			st_tok(stack, line[(*i)++], 0);
-	}
+		after_quote(stack, line, i);
 	if (line[(*i)] && (line[(*i)] == '\'' || line[(*i)] == '"'))
-	{
-		// ft_putendl("0");
 		stuck_quote(stack, line, i);
-		// ft_putendl("1");
-	}
 	tok_save(lst, stack, QUOTE);
 	if (line[(*i)] && line[(*i) + 1] && check_end(line + ((*i) + 1)))
 	{
-		// ft_putendl("INIT_NEW TOKEN");
 		(*lst)->n = init_tok(lst, NE);
 		*lst = (*lst)->n;
 	}
 	if (line[(*i)] == '\0')
 		(*i)--;
-	// ft_putendl("????");
 }
 
 void	chevron(t_tok **lst, char **stack, char *line, int *i)
diff --git a/srcs/lexer/lex_luthor.c b/srcs/lexer/lex_luthor.c
index 962b241..4af27df 100644
--- a/srcs/lexer/lex_luthor.c
+++ b/srcs/lexer/lex_luthor.c
@@ -6,7 +6,7 @@
 /*   By: zadrien <zadrien@student.42.fr>            +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2017/05/02 15:14:13 by zadrien           #+#    #+#             */
-/*   Updated: 2017/10/12 22:32:24 by zadrien          ###   ########.fr       */
+/*   Updated: 2017/10/15 18:20:36 by zadrien          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -39,8 +39,6 @@ t_tok	*init_tok(t_tok **lst, int mod)
 
 void	tok_save(t_tok **lst, char **stack, int type)
 {
-	if (type & (WORD | DQUOTE))
-		stack_expanse(stack);
 	(*lst)->str = ft_strdup(*stack);
 	if (type == WORD && ft_isalpha((*lst)->str[0]) &&
 			ft_strchr((*lst)->str, '='))
@@ -54,7 +52,6 @@ void	flush(t_tok **lst, char **stack, char *line, int *i)
 {
 	if (ft_strlen(*stack) > 0)
 	{
-		// find_env_loc(stack, 1);
 		tok_save(lst, stack, WORD);
 		if (check_end(line + (*i)))
 		{
@@ -72,25 +69,23 @@ void	new_parser(t_tok **cmd, char *line, int i)
 	int					j;
 	char				*stack;
 	t_tok				*tmp;
-	static const t_key	key[9] = {{'"', &ft_quote}, {'\'', &ft_quote},
+	static const t_key	key[11] = {{'"', &ft_quote}, {'\'', &ft_quote},
 {' ', &flush}, {'>', &chevron}, {'<', &chevron}, {';', &question_mark},
-{'|', &pipe_pars}, {'&', &and_pars}, {'\\', &backslash}};
+{'|', &pipe_pars}, {'&', &and_pars}, {'\\', &backslash}, {'$', &lexer_exp},
+{'~', &tild}};
 
 	tmp = *cmd;
-	// ft_putendl(line);
 	stack = ft_memalloc(100);
 	while (line[i])
 	{
 		j = -1;
-		while (++j < 9)
+		while (++j < 11)
 			if (line[i] == key[j].i)
 			{
-				// ft_putendl("Salute");
 				key[j].f(&tmp, &stack, line, &i);
 				break ;
 			}
-		// ft_putchar(line[i]);
-		j == 9 ? st_tok(&stack, line[i], 0) : 0;
+		j == 11 ? st_tok(&stack, line[i], 0) : 0;
 		i++;
 	}
 	stack && ft_strlen(stack) > 0 ? tok_save(&tmp, &stack, WORD) : 0;
diff --git a/srcs/lexer/misc_exp.c b/srcs/lexer/misc_exp.c
new file mode 100644
index 0000000..9c6aae1
--- /dev/null
+++ b/srcs/lexer/misc_exp.c
@@ -0,0 +1,75 @@
+/* ************************************************************************** */
+/*                                                                            */
+/*                                                        :::      ::::::::   */
+/*   misc_exp.c                                         :+:      :+:    :+:   */
+/*                                                    +:+ +:+         +:+     */
+/*   By: zadrien <zadrien@student.42.fr>            +#+  +:+       +#+        */
+/*                                                +#+#+#+#+#+   +#+           */
+/*   Created: 2017/10/12 13:56:57 by zadrien           #+#    #+#             */
+/*   Updated: 2017/10/15 18:43:44 by zadrien          ###   ########.fr       */
+/*                                                                            */
+/* ************************************************************************** */
+
+#include "header.h"
+
+t_local			*find_local(t_local **local, char *var)
+{
+	t_local		*tmp;
+
+	if (*local)
+	{
+		tmp = *local;
+		while (tmp && ft_strcmp(var, tmp->var) != 0)
+			tmp = tmp->n;
+		return (tmp);
+	}
+	return (NULL);
+}
+
+void			tild(t_tok **lst, char **stack, char *line, int *i)
+{
+	int		j;
+	t_env	*env;
+
+	j = -1;
+	(void)lst;
+	if (is_space(line[(*i) + 1]) || !line[(*i) + 1] || line[(*i) + 1] == '/')
+		if ((env = find_node(&(*cmdl_slg())->lstenv, "HOME", NULL)) &&
+			env->value)
+		{
+			while (env->value[++j])
+				st_tok(stack, env->value[j], 0);
+			return ;
+		}
+	st_tok(stack, line[(*i)], 0);
+}
+
+void			lexer_exp(t_tok **lst, char **stack, char *line, int *i)
+{
+	(void)lst;
+	expanse_stack(stack, line, i);
+	(*i)--;
+}
+
+void			complete_st_quote(char **stack, char **ins, char **str)
+{
+	int		i;
+
+	if (!(*stack = (char*)malloc(sizeof(char) * 100)))
+		exit(EXIT_FAILURE);
+	ft_memset(*stack, 0, 100);
+	i = -1;
+	if (*ins)
+	{
+		while ((*ins)[++i])
+			st_tok(stack, (*ins)[i], 0);
+		ft_strdel(ins);
+	}
+	i = -1;
+	if (*str)
+	{
+		while ((*str)[++i])
+			st_tok(stack, (*str)[i], 0);
+		ft_strdel(str);
+	}
+}
diff --git a/srcs/lexer/misc_lexer.c b/srcs/lexer/misc_lexer.c
index f8e0098..49b41b1 100644
--- a/srcs/lexer/misc_lexer.c
+++ b/srcs/lexer/misc_lexer.c
@@ -6,7 +6,7 @@
 /*   By: zadrien <zadrien@student.42.fr>            +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2017/10/10 15:30:01 by zadrien           #+#    #+#             */
-/*   Updated: 2017/10/13 22:33:21 by zadrien          ###   ########.fr       */
+/*   Updated: 2017/10/15 18:30:31 by zadrien          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -22,44 +22,13 @@ void	stuck_quote(char **stack, char *line, int *i)
 	str = NULL;
 	if (*stack)
 	{
-		// ft_putendl("IN stuck_quote");
 		str = ft_memalloc(100);
 		st_tok(NULL, 0, 1);
-		if (line[(*i)] == '\'' || line[(*i)] == '"')
-		{ // USELESS
-			complete(&str, line, i);
-			st_tok(NULL, 0, 1);
-			new = ft_strdup(*stack);
-			ft_strdel(stack);
-			// ft_printf("NEW: %@%s%@\n", GREEN, new, I);
-			if (!(*stack = (char *)malloc(sizeof(char) * 100)))
-				perror("malloc:"); // TO REMOVE
-			ft_memset(*stack, 0, 100);
-			// ft_putnbrl(j);
-			while (new[++j])
-			{
-				// ft_putchar(new[j]);ft_putchar('\n');
-				st_tok(stack, new[j], 0);
-			}
-			// ft_putendl("BONJOUR");
-			ft_strdel(&new);
-			// }
-			// else perror("malloc stack");
-			j = -1;
-			if (str)
-			{
-				// ft_putendl("HELLO");
-				while (str[++j])
-				{
-					// ft_printf("^^^^^^[%c]^^^^^^", str[j]);
-					st_tok(stack, str[j], 0);
-				}
-				ft_strdel(&str);
-			}
-			// else
-				// ft_putendl("NULL");
-			// ft_putendl("WORLD");
-		}
+		complete(&str, line, i);
+		st_tok(NULL, 0, 1);
+		new = ft_strdup(*stack);
+		ft_strdel(stack);
+		complete_st_quote(stack, &new, &str);
 	}
 }
 
@@ -72,25 +41,13 @@ void	complete(char **stack, char *line, int *i)
 	if (line[(*i)])
 		quote = line[(*i)++];
 	type = (quote == '\'' ? QUOTE : DQUOTE);
-	complete_quote(stack, line, i, quote);
-	// ft_putendl("INNER_QUOTE");
-	while (line[(*i)] && !is_space(line[(*i)]) && line[(*i)] != '"' && line[(*i)] != '\'')
-	{
-		if (quote == '"' && line[(*i)] == '\\')
-		{
-			st_tok(stack, line[++(*i)], 0);
-			line[(*i) + 1] ? (*i)++ : 0;
-		}
-		else
-			st_tok(stack, line[(*i)++], 0);
-	}
+	in_quote(stack, line, i, type);
+	if (line[(*i)] && !is_space(line[(*i)]) &&
+				line[(*i)] != '"' && line[(*i)] != '\'')
+		expanse_stack(stack, line, i);
 	if (line[(*i) + 1] != '\0' && check_end(line + ((*i) + 1)))
-	{
 		if (line[(*i)] == '\'' || line[(*i)] == '"')
 			stuck_quote(stack, line, i);
-		// ft_printf("END INNER_QUOTE: %s\n", *stack);
-		// (*i)--;
-	}
 }
 
 int		print_error_lexer(t_tok **lst, t_tok **n, int mod)
diff --git a/srcs/lexer/the_dog.c b/srcs/lexer/the_dog.c
index a7f6b10..60b11ad 100644
--- a/srcs/lexer/the_dog.c
+++ b/srcs/lexer/the_dog.c
@@ -6,43 +6,12 @@
 /*   By: zadrien <zadrien@student.42.fr>            +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2017/05/05 14:43:46 by zadrien           #+#    #+#             */
-/*   Updated: 2017/10/13 22:30:27 by zadrien          ###   ########.fr       */
+/*   Updated: 2017/10/15 18:08:33 by zadrien          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
 #include "header.h"
 
-void	complete_quote(char **stack, char *line, int *i, char quote)
-{
-	if (ft_strlen(*stack) > 0 && quote == '"')
-	{
-		// ft_printf("[%c] First expanse complete_quote\n", quote);
-		stack_expanse(stack);
-	}
-	while (line[(*i)] && line[(*i)] != quote)
-	{
-		if (quote == '"' && line[(*i)] == '\\')
-		{
-			st_tok(stack, line[++(*i)], 0);
-			(*i)++;
-		}
-		else
-			st_tok(stack, line[(*i)++], 0);
-	}
-	// ft_printf("%@complete_quote: %s%@\n", BLUE, *stack, I);
-	// if (line[(*i) + 1])
-	// 	(*i)++; I"M IN THE QUOTE
-	if (quote == '"')
-	{
-		// ft_putendl("complete_quote: DQUOTE");
-		stack_expanse(stack);
-		// ft_printf("%@complete_quote: %s%@\n", RED, *stack, I);
-	}
-	// else
-		// ft_putendl("complete_quote: QUOTE");
-	(*i)++;
-}
-
 void	delete_lst(t_tok **cmd)
 {
 	t_tok *tmp;
@@ -73,11 +42,9 @@ void	st_tok(char **stack, char c, int reset)
 	i = 0;
 	if (reset)
 	{
-		// ft_putendl("st_tok: RESET");
 		len = 100;
 		return ;
 	}
-	// ft_printf("st_tok: len = %d\n", len);
 	if ((i = (int)ft_strlen(*stack)) == (len - 1))
 	{
 		i = -1;
@@ -87,14 +54,10 @@ void	st_tok(char **stack, char c, int reset)
 		while ((*stack)[++i])
 			tmp[i] = (*stack)[i];
 		tmp[i] = c;
-		// ft_printf("[remaloc]char: %c\n", c);
 		ft_strdel(stack);
 		*stack = tmp;
 		len += 100;
 	}
 	else
-	{
 		(*stack)[i] = c;
-		// ft_printf("char: %c\n", c);
-	}
 }
